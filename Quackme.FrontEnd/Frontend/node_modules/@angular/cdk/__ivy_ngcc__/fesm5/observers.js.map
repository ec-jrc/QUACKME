{"version":3,"file":"observers.js","sources":["../../../../../../src/cdk/observers/observe-content.ts","../../../../../../src/cdk/observers/public-api.ts","../../../../../../src/cdk/observers/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  coerceElement,\n  BooleanInput\n} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<Element, {\n    observer: MutationObserver | null,\n    stream: Subject<MutationRecord[]>,\n    count: number\n  }>();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input('cdkObserveContentDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number { return this._debounce; }\n  set debounce(value: number) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(private _contentObserver: ContentObserver,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription =\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    if (this._currentSubscription) {\n      this._currentSubscription.unsubscribe();\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_debounce: BooleanInput;\n}\n\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory]\n})\nexport class ObserversModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './observe-content';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}