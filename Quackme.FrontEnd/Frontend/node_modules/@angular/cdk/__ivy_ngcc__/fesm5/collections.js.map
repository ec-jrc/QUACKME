{"version":3,"file":"collections.js","sources":["../../../../../../src/cdk/collections/data-source.ts","../../../../../../src/cdk/collections/array-data-source.ts","../../../../../../src/cdk/collections/selection-model.ts","../../../../../../src/cdk/collections/unique-selection-dispatcher.ts","../../../../../../src/cdk/collections/public-api.ts","../../../../../../src/cdk/collections/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {CollectionViewer} from './collection-viewer';\n\nexport abstract class DataSource<T> {\n  /**\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\n   * the stream provided will be accessed during change detection and should not directly change\n   * values that are bound in template views.\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   * @returns Observable that emits a new value when the data changes.\n   */\n  abstract connect(collectionViewer: CollectionViewer): Observable<T[] | ReadonlyArray<T>>;\n\n  /**\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\n   *\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   */\n  abstract disconnect(collectionViewer: CollectionViewer): void;\n}\n\n/** Checks whether an object is a data source. */\nexport function isDataSource(value: any): value is DataSource<any> {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource.\n  return value && typeof value.connect === 'function';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, isObservable, of as observableOf} from 'rxjs';\nimport {DataSource} from './data-source';\n\n\n/** DataSource wrapper for a native array. */\nexport class ArrayDataSource<T> extends DataSource<T> {\n  constructor(private _data: T[] | ReadonlyArray<T> | Observable<T[] | ReadonlyArray<T>>) {\n    super();\n  }\n\n  connect(): Observable<T[] | ReadonlyArray<T>> {\n    return isObservable(this._data) ? this._data : observableOf(this._data);\n  }\n\n  disconnect() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject} from 'rxjs';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n  /** Currently-selected values. */\n  private _selection = new Set<T>();\n\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\n  private _deselectedToEmit: T[] = [];\n\n  /** Keeps track of the selected options that haven't been emitted by the change event. */\n  private _selectedToEmit: T[] = [];\n\n  /** Cache for the array value of the selected items. */\n  private _selected: T[] | null;\n\n  /** Selected values. */\n  get selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n\n  /** Event emitted when the value has changed. */\n  changed: Subject<SelectionChange<T>> = new Subject();\n\n  constructor(\n    private _multiple = false,\n    initiallySelectedValues?: T[],\n    private _emitChanges = true) {\n\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n\n  /**\n   * Selects a value or an array of values.\n   */\n  select(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Deselects a value or an array of values.\n   */\n  deselect(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Toggles a value between selected and deselected.\n   */\n  toggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n\n  /**\n   * Clears all of the selected values.\n   */\n  clear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Determines whether a value is selected.\n   */\n  isSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n\n  /**\n   * Determines whether the model does not have a value.\n   */\n  isEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n\n  /**\n   * Determines whether the model has a value.\n   */\n  hasValue(): boolean {\n    return !this.isEmpty();\n  }\n\n  /**\n   * Sorts the selected values based on a predicate function.\n   */\n  sort(predicate?: (a: T, b: T) => number): void {\n    if (this._multiple && this.selected) {\n      this._selected!.sort(predicate);\n    }\n  }\n\n  /**\n   * Gets whether multiple values can be selected.\n   */\n  isMultipleSelection() {\n    return this._multiple;\n  }\n\n  /** Emits a change event and clears the records of selected and deselected values. */\n  private _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      this.changed.next({\n        source: this,\n        added: this._selectedToEmit,\n        removed: this._deselectedToEmit\n      });\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n\n  /** Selects a value. */\n  private _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Deselects a value. */\n  private _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Clears out the selected values. */\n  private _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n\n  /**\n   * Verifies the value assignment and throws an error if the specified value array is\n   * including multiple values while the selection model is not supporting multiple values.\n   */\n  private _verifyValueAssignment(values: T[]) {\n    if (values.length > 1 && !this._multiple) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport interface SelectionChange<T> {\n  /** Model that dispatched the event. */\n  source: SelectionModel<T>;\n  /** Options that were added to the model. */\n  added: T[];\n  /** Options that were removed from the model. */\n  removed: T[];\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nexport function getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './array-data-source';\nexport * from './collection-viewer';\nexport * from './data-source';\nexport * from './selection-model';\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n} from './unique-selection-dispatcher';\nexport * from './tree-adapter';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}