{"version":3,"file":"progress-bar.js","sources":["../../../../../../src/material/progress-bar/progress-bar.ts","../../../../../../src/material/progress-bar/progress-bar-module.ts","../../../../../../src/material/progress-bar/public-api.ts","../../../../../../src/material/progress-bar/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {fromEvent, Observable, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate' | 'buffer' | 'query';\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(coerceNumberProperty(v) || 0);\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: ProgressBarMode = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n    return null;\n  }\n\n  ngAfterViewInit() {\n    // Run outside angular so change detection didn't get triggered on every transition end\n    // instead only on the animation that we care about (primary value bar's transitionend)\n    this._ngZone.runOutsideAngular((() => {\n      const element = this._primaryValueBar.nativeElement;\n\n      this._animationEndSubscription =\n        (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n          .pipe(filter(((e: TransitionEvent) => e.target === element)))\n          .subscribe(() => {\n            if (this.mode === 'determinate' || this.mode === 'buffer') {\n              this._ngZone.run(() => this.animationEnd.next({value: this.value}));\n            }\n          });\n    }));\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  static ngAcceptInputType_value: NumberInput;\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './progress-bar-module';\nexport * from './progress-bar';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}