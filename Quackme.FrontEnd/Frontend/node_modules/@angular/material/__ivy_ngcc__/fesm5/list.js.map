{"version":3,"file":"list.js","sources":["../../../../../../src/material/list/list.ts","../../../../../../src/material/list/selection-list.ts","../../../../../../src/material/list/list-module.ts","../../../../../../src/material/list/public-api.ts","../../../../../../src/material/list/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, BooleanInput} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  mixinDisabled,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatListBase =\n    mixinDisabled(mixinDisableRipple(MatListBase));\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisable, CanDisableRipple,\n  OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n@Component({\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisable, CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item mat-focus-indicator',\n    '[class.mat-list-item-disabled]': 'disabled',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || !!(this._list && this._list.disabled); }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  hasModifierKey,\n  HOME,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n  isDevMode,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  mixinDisableRipple,\n  setLines,\n  ThemePalette,\n} from '@angular/material/core';\n\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option mat-focus-indicator',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme.\n    '[class.mat-primary]': 'color === \"primary\"',\n    // Even though accent is the default, we need to set this class anyway, because the  list might\n    // be placed inside a parent that has one of the other colors with a higher specificity.\n    '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[class.mat-list-single-selected-option]': 'selected && !selectionList.multiple',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.tabindex]': '-1',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase implements AfterContentInit, OnDestroy,\n                                                                      OnInit, FocusableOption,\n                                                                      CanDisableRipple {\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n   * in the first cycle.\n   */\n  private _inputsInitialized = false;\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value && this._inputsInitialized) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n    this._inputsInitialized = true;\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled && (this.selectionList.multiple || !this.selected)) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_selected: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabindex]': '_tabIndex',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n  private _multiple = true;\n  private _contentInitialized = false;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /**\n   * Tabindex of the selection list.\n   * @breaking-change 11.0.0 Remove `tabIndex` input.\n   */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** Whether selection is limited to one or multiple items (default multiple). */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._multiple) {\n      if (isDevMode() && this._contentInitialized) {\n        throw new Error(\n            'Cannot change `multiple` mode of mat-selection-list after initialization.');\n      }\n\n      this._multiple = newValue;\n      this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);\n    }\n  }\n\n  /** The currently selected options. */\n  selectedOptions = new SelectionModel<MatListOption>(this._multiple);\n\n  /** The tabindex of the selection list. */\n  _tabIndex = -1;\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n    // @breaking-change 11.0.0 Remove `tabIndex` parameter.\n    @Attribute('tabindex') tabIndex: string,\n    private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngAfterContentInit(): void {\n    this._contentInitialized = true;\n\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // If the user attempts to tab out of the selection list, allow focus to escape.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the number of options change, update the tabindex of the selection list.\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._updateTabIndex();\n    });\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier && !manager.isTyping()) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      default:\n        // The \"A\" key gets special treatment, because it's used for the \"select all\" functionality.\n        if (keyCode === A && this.multiple && hasModifierKey(event, 'ctrlKey') &&\n            !manager.isTyping()) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        } else {\n          manager.onKeydown(event);\n        }\n    }\n\n    if (this.multiple && (keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /**\n   * When the selection list is focused, we want to move focus to an option within the list. Do this\n   * by setting the appropriate option to be active.\n   */\n  _onFocus(): void {\n    const activeIndex = this._keyManager.activeItemIndex;\n\n    if (!activeIndex || (activeIndex === -1)) {\n      // If there is no active index, set focus to the first option.\n      this._keyManager.setFirstItemActive();\n    } else {\n      // Otherwise, set focus to the active option.\n      this._keyManager.setActiveItem(activeIndex);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled && (this._multiple || !focusedOption.selected)) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n\n  /**\n   * Removes the tabindex from the selection list and resets it back afterwards, allowing the user\n   * to tab out of it. This prevents the list from capturing focus and redirecting it back within\n   * the list, creating a focus trap if it user tries to tab away.\n   */\n  private _allowFocusEscape() {\n    this._tabIndex = -1;\n\n    setTimeout(() => {\n      this._tabIndex = 0;\n      this._changeDetector.markForCheck();\n    });\n  }\n\n  /** Updates the tabindex based upon if the selection list is empty. */\n  private _updateTabIndex(): void {\n    this._tabIndex = (this.options.length === 0) ? -1 : 0;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_multiple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './list-module';\nexport * from './list';\nexport * from './selection-list';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}