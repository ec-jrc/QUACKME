{"version":3,"file":"sidenav.js","sources":["../../../../../../src/material/sidenav/drawer-animations.ts","../../../../../../src/material/sidenav/drawer.ts","../../../../../../src/material/sidenav/sidenav.ts","../../../../../../src/material/sidenav/sidenav-module.ts","../../../../../../src/material/sidenav/public-api.ts","../../../../../../src/material/sidenav/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Drawer and SideNav display modes. */\nexport type MatDrawerMode = 'over' | 'push' | 'side';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nexport const MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): MatDrawerMode { return this._mode; }\n  set mode(value: MatDrawerMode) {\n    this._mode = value;\n    this._updateFocusTrapState();\n    this._modeChanged.next();\n  }\n  private _mode: MatDrawerMode = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /**\n   * Whether the drawer should focus the first focusable element automatically when opened.\n   * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n   * enabled, focus will be moved into the sidenav in `side` mode as well.\n   */\n  @Input()\n  get autoFocus(): boolean {\n    const value = this._autoFocus;\n\n    // Note that usually we disable auto focusing in `side` mode, because we don't know how the\n    // sidenav is being used, but in some cases it still makes sense to do it. If the consumer\n    // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.\n    return value == null ? this.mode !== 'side' : value;\n  }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean | undefined;\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any,\n              /**\n               * @deprecated `_container` parameter to be made required.\n               * @breaking-change 10.0.0\n               */\n              @Optional() @Inject(MAT_DRAWER_CONTAINER) public _container?: MatDrawerContainer) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        this._takeFocus();\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => {\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /**\n   * Moves focus into the drawer. Note that this works even if\n   * the focus trap is disabled in `side` mode.\n   */\n  private _takeFocus() {\n    if (!this.autoFocus || !this._focusTrap) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.\n      if (this._elementFocusedBeforeDrawerWasOpened) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._updateFocusTrapState();\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    this._updateFocusTrapState();\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  /** Updates the enabled state of the focus trap. */\n  private _updateFocusTrapState() {\n    if (this._focusTrap) {\n      // The focus trap is only enabled when the drawer is open in any mode other than side.\n      this._focusTrap.enabled = this.opened && this.mode !== 'side';\n    }\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n\n  static ngAcceptInputType_disableClose: BooleanInput;\n  static ngAcceptInputType_autoFocus: BooleanInput;\n  static ngAcceptInputType_opened: BooleanInput;\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [{\n    provide: MAT_DRAWER_CONTAINER,\n    useExisting: MatDrawerContainer\n  }]\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  /** All drawers in the container. Includes drawers from inside nested containers. */\n  @ContentChildren(MatDrawer, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _allDrawers: QueryList<MatDrawer>;\n\n  /** Drawers that belong to this container. */\n  _drawers = new QueryList<MatDrawer>();\n\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._allDrawers.changes\n      .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n      .subscribe((drawer: QueryList<MatDrawer>) => {\n        // @breaking-change 10.0.0 Remove `_container` check once container parameter is required.\n        this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n        this._drawers.notifyOnChanges();\n      });\n\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._drawers.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    const classList = this._element.nativeElement.classList;\n    const className = 'mat-drawer-container-has-open';\n\n    if (isAdd) {\n      classList.add(className);\n    } else {\n      classList.remove(className);\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  static ngAcceptInputType_autosize: BooleanInput;\n  static ngAcceptInputType_hasBackdrop: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent, MAT_DRAWER_CONTAINER} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n\n  static ngAcceptInputType_fixedInViewport: BooleanInput;\n  static ngAcceptInputType_fixedTopGap: NumberInput;\n  static ngAcceptInputType_fixedBottomGap: NumberInput;\n}\n\n\n@Component({\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [{\n    provide: MAT_DRAWER_CONTAINER,\n    useExisting: MatSidenavContainer\n  }]\n\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _allDrawers: QueryList<MatSidenav>;\n\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n  static ngAcceptInputType_hasBackdrop: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './sidenav-module';\nexport {\n  throwMatDuplicatedDrawerError,\n  MatDrawerToggleResult,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n  MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n  MatDrawerContent,\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerMode,\n} from './drawer';\nexport * from './sidenav';\nexport * from './drawer-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MAT_DRAWER_CONTAINER as Éµangular_material_src_material_sidenav_sidenav_a} from './drawer';"]}