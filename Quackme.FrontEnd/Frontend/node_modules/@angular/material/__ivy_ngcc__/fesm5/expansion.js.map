{"version":3,"file":"expansion.js","sources":["../../../../../../src/material/expansion/accordion-base.ts","../../../../../../src/material/expansion/expansion-animations.ts","../../../../../../src/material/expansion/expansion-panel-content.ts","../../../../../../src/material/expansion/expansion-panel.ts","../../../../../../src/material/expansion/expansion-panel-header.ts","../../../../../../src/material/expansion/accordion.ts","../../../../../../src/material/expansion/expansion-module.ts","../../../../../../src/material/expansion/public-api.ts","../../../../../../src/material/expansion/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionTogglePosition} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n  static ngAcceptInputType_expanded: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\nimport {MatAccordionTogglePosition} from './accordion-base';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@.disabled]': '_animationsDisabled',\n    '(@expansionHeight.start)': '_animationStarted()',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  /** Whether Angular animations in the panel header should be disabled. */\n  _animationsDisabled = true;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  _animationStarted() {\n    // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n    // there to work around a bug in Angular (see #13088), however this introduces a different\n    // issue. The new transition will cause the header to animate in on init (see #16067), if the\n    // consumer has set a header height that is different from the default one. We work around it\n    // by disabling animations on the header and re-enabling them after the first animation has run.\n    // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n    // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n    // for https://github.com/angular/angular/issues/18847 to be resolved.\n    this._animationsDisabled = false;\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    this._focusMonitor.focusVia(this._element, origin, options);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if multiple panel support is enabled.\n    '[class.mat-accordion-multi]': 'this.multi',\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  /** Headers belonging to this accordion. */\n  private _ownHeaders = new QueryList<MatExpansionPanelHeader>();\n\n  /** All headers inside the accordion. Includes headers inside nested accordions. */\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._headers.changes\n      .pipe(startWith(this._headers))\n      .subscribe((headers: QueryList<MatExpansionPanelHeader>) => {\n        this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n        this._ownHeaders.notifyOnChanges();\n      });\n\n    this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './expansion-module';\nexport * from './accordion';\nexport * from './accordion-base';\nexport * from './expansion-panel';\nexport * from './expansion-panel-header';\nexport * from './expansion-panel-content';\nexport * from './expansion-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}