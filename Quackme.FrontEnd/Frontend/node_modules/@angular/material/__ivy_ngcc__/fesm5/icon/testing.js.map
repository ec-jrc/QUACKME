{"version":3,"file":"testing.js","sources":["../../../../../../../src/material/icon/testing/fake-icon-registry.ts","../../../../../../../src/material/icon/testing/public-api.ts","../../../../../../../src/material/icon/testing/index.ts"],"names":["observableOf"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACG;AACuE;AACjE;;AAET;AACyC,IADzC;AACmB,KAsElB;AACD,IAtEE,wCAAU,GAAV;AAAc,QACZ,OAAO,IAAI,CAAC;AAChB,KAAG;AAEH,IAAE,+CAAiB,GAAjB;AAAc,QACZ,OAAO,IAAI,CAAC;AAChB,KAAG;AAEH,IAAE,mDAAqB,GAArB;AAAc,QACZ,OAAO,IAAI,CAAC;AAChB,KAAG;AAEH,IAAE,0DAA4B,GAA5B;AAAc,QACZ,OAAO,IAAI,CAAC;AAChB,KAAG;AAEH,IAAE,2CAAa,GAAb;AAAc,QACZ,OAAO,IAAI,CAAC;AAChB,KAAG;AAEH,IAAE,kDAAoB,GAApB;AAAc,QACZ,OAAO,IAAI,CAAC;AAChB,KAAG;AAEH,IAAE,sDAAwB,GAAxB;AAAc,QACZ,OAAO,IAAI,CAAC;AAChB,KAAG;AAEH,IAAE,6DAA+B,GAA/B;AAAc,QACZ,OAAO,IAAI,CAAC;AAChB,KAAG;AAEH,IAAE,oDAAsB,GAAtB;AAAc,QACZ,OAAO,IAAI,CAAC;AAChB,KAAG;AAEH,IAAE,mDAAqB,GAArB,UAAsB,KAAa;AAAI,QACrC,OAAO,KAAK,CAAC;AACjB,KAAG;AAEH,IAAE,oDAAsB,GAAtB;AAAc,QACZ,OAAO,gBAAgB,CAAC;AAC5B,KAAG;AAEH,IAAE,+CAAiB,GAAjB;AAAc,QACZ,OAAOA,EAAY,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;AAClD,KAAG;AAEH,IAAE,6CAAe,GAAf;AAAc,QACZ,OAAOA,EAAY,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;AAClD,KAAG;AAEH,IAAE,oDAAsB,GAAtB;AAAc,QACZ,OAAO,IAAI,CAAC;AAChB,KAAG;AAEH,IAAE,yCAAW,GAAX,eAAiB;AAEnB,IAAU,+CAAiB,GAAzB;AAAc,QACZ,IAAM,QAAQ,GAAG,QAAQ,CAAC,eAAe,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;AACnF,QAAI,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;AAC/C;AACI,QAAA,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AACrC,QAAI,QAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAC5C,QAAI,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC3C,QAAI,QAAQ,CAAC,YAAY,CAAC,qBAAqB,EAAE,eAAe,CAAC,CAAC;AAClE,QAAI,QAAQ,CAAC,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;AAChD,QAAI,OAAO,QAAQ,CAAC;AACpB,KAAG;uDAtEF,UAAU;;;;gDACL;AAAC,IAsEP,0BAAC;AAED,CAzEA,IAuEC;AAED;AACA;AAC4C,IAD5C;AACsB,KAGrB;wDAJA,QAAQ,SAAC;UACR,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,mBAAmB,EAAC,CAAC,kBACvE;;;;;;gDACQ;AAAC,IACV,2BAAC;AACA,CALD;AAAK;AChGL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;ACPA;AACA;AACA,GAAG;AACH;AACA;AACwB","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgModule, OnDestroy} from '@angular/core';\nimport {MatIconRegistry} from '@angular/material/icon';\nimport {Observable, of as observableOf} from 'rxjs';\n\n// tslint:disable:no-any Impossible to tell param types.\ntype PublicApi<T> = {\n  [K in keyof T]: T[K] extends (...x: any[]) => T ? (...x: any[]) => PublicApi<T> : T[K]\n};\n// tslint:enable:no-any\n\n/**\n * A null icon registry that must be imported to allow disabling of custom\n * icons.\n */\n@Injectable()\nexport class FakeMatIconRegistry implements PublicApi<MatIconRegistry>, OnDestroy {\n  addSvgIcon(): this {\n    return this;\n  }\n\n  addSvgIconLiteral(): this {\n    return this;\n  }\n\n  addSvgIconInNamespace(): this {\n    return this;\n  }\n\n  addSvgIconLiteralInNamespace(): this {\n    return this;\n  }\n\n  addSvgIconSet(): this {\n    return this;\n  }\n\n  addSvgIconSetLiteral(): this {\n    return this;\n  }\n\n  addSvgIconSetInNamespace(): this {\n    return this;\n  }\n\n  addSvgIconSetLiteralInNamespace(): this {\n    return this;\n  }\n\n  registerFontClassAlias(): this {\n    return this;\n  }\n\n  classNameForFontAlias(alias: string): string {\n    return alias;\n  }\n\n  getDefaultFontSetClass() {\n    return 'material-icons';\n  }\n\n  getSvgIconFromUrl(): Observable<SVGElement> {\n    return observableOf(this._generateEmptySvg());\n  }\n\n  getNamedSvgIcon(): Observable<SVGElement> {\n    return observableOf(this._generateEmptySvg());\n  }\n\n  setDefaultFontSetClass(): this {\n    return this;\n  }\n\n  ngOnDestroy() { }\n\n  private _generateEmptySvg(): SVGElement {\n    const emptySvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    emptySvg.classList.add('fake-testing-svg');\n    // Emulate real icon characteristics from `MatIconRegistry` so size remains consistent in tests.\n    emptySvg.setAttribute('fit', '');\n    emptySvg.setAttribute('height', '100%');\n    emptySvg.setAttribute('width', '100%');\n    emptySvg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    emptySvg.setAttribute('focusable', 'false');\n    return emptySvg;\n  }\n}\n\n/** Import this module in tests to install the null icon registry. */\n@NgModule({\n  providers: [{provide: MatIconRegistry, useClass: FakeMatIconRegistry}]\n})\nexport class MatIconTestingModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './fake-icon-registry';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}