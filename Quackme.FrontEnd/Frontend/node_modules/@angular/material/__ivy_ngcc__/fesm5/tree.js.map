{"version":3,"file":"tree.js","sources":["../../../../../../src/material/tree/node.ts","../../../../../../src/material/tree/padding.ts","../../../../../../src/material/tree/outlet.ts","../../../../../../src/material/tree/tree.ts","../../../../../../src/material/tree/toggle.ts","../../../../../../src/material/tree/tree-module.ts","../../../../../../src/material/tree/data-source/flat-data-source.ts","../../../../../../src/material/tree/data-source/nested-data-source.ts","../../../../../../src/material/tree/public-api.ts","../../../../../../src/material/tree/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends CdkNestedTreeNode<T> implements AfterContentInit,\n  OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** Whether the node is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /** Tabindex for the node. */\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  private _tabIndex: number;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]',\n  providers: [{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }]\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.changed,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nexport * from './node';\nexport * from './padding';\nexport * from './tree';\nexport * from './tree-module';\nexport * from './toggle';\nexport * from './outlet';\nexport * from './data-source/flat-data-source';\nexport * from './data-source/nested-data-source';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}