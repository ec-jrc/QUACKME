{"version":3,"file":"auth0-angular-jwt.js","sources":["ng:/@auth0/angular-jwt/lib/jwtoptions.token.ts","ng:/@auth0/angular-jwt/lib/jwthelper.service.ts","ng:/@auth0/angular-jwt/lib/jwt.interceptor.ts","ng:/@auth0/angular-jwt/lib/angular-jwt.module.ts","ng:/@auth0/angular-jwt/index.ts","ng:/@auth0/angular-jwt/auth0-angular-jwt.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const JWT_OPTIONS = new InjectionToken('JWT_OPTIONS');\n","// tslint:disable:no-bitwise\n\nimport { Injectable, Inject } from '@angular/core';\nimport { JWT_OPTIONS } from './jwtoptions.token';\n\n@Injectable()\nexport class JwtHelperService {\n  tokenGetter: () => string;\n\n  constructor(@Inject(JWT_OPTIONS) config = null) {\n    this.tokenGetter = config && config.tokenGetter || function() {};\n  }\n\n  public urlBase64Decode(str: string): string {\n    let output = str.replace(/-/g, '+').replace(/_/g, '/');\n    switch (output.length % 4) {\n      case 0: {\n        break;\n      }\n      case 2: {\n        output += '==';\n        break;\n      }\n      case 3: {\n        output += '=';\n        break;\n      }\n      default: {\n        throw new Error('Illegal base64url string!');\n      }\n    }\n    return this.b64DecodeUnicode(output);\n  }\n\n  // credits for decoder goes to https://github.com/atk\n  private b64decode(str: string): string {\n    const chars =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    let output = '';\n\n    str = String(str).replace(/=+$/, '');\n\n    if (str.length % 4 === 1) {\n      throw new Error(\n        '\\'atob\\' failed: The string to be decoded is not correctly encoded.'\n      );\n    }\n\n    for (\n      // initialize result and counters\n      let bc = 0, bs: any, buffer: any, idx = 0;\n      // get next character\n      (buffer = str.charAt(idx++));\n      // character found in table? initialize bit storage and add its ascii value;\n      ~buffer &&\n      (\n        (bs = bc % 4 ? bs * 64 + buffer : buffer),\n        // and if not first of each 4 characters,\n        // convert the first 8 bits to one ascii character\n        bc++ % 4\n      )\n        ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n        : 0\n    ) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n    return output;\n  }\n\n  private b64DecodeUnicode(str: any) {\n    return decodeURIComponent(\n      Array.prototype.map\n        .call(this.b64decode(str), (c: any) => {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n        .join('')\n    );\n  }\n\n  public decodeToken(token: string = this.tokenGetter()): any {\n    if (!token || token === '') {\n      return null;\n    }\n\n    const parts = token.split('.');\n\n    if (parts.length !== 3) {\n      throw new Error(\n        'The inspected token doesn\\'t appear to be a JWT. Check to make sure it has three parts and see https://jwt.io for more.'\n      );\n    }\n\n    const decoded = this.urlBase64Decode(parts[1]);\n    if (!decoded) {\n      throw new Error('Cannot decode the token.');\n    }\n\n    return JSON.parse(decoded);\n  }\n\n  public getTokenExpirationDate(token: string = this.tokenGetter()): Date | null {\n    let decoded: any;\n    decoded = this.decodeToken(token);\n\n    if (!decoded || !decoded.hasOwnProperty('exp')) {\n      return null;\n    }\n\n    const date = new Date(0);\n    date.setUTCSeconds(decoded.exp);\n\n    return date;\n  }\n\n  public isTokenExpired(token: string = this.tokenGetter(), offsetSeconds?: number): boolean {\n    if (!token || token === '') {\n        return true;\n    }\n    const date = this.getTokenExpirationDate(token);\n    offsetSeconds = offsetSeconds || 0;\n\n    if (date === null) {\n      return false;\n    }\n\n    return !(date.valueOf() > new Date().valueOf() + offsetSeconds * 1000);\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { JwtHelperService } from './jwthelper.service';\nimport { JWT_OPTIONS } from './jwtoptions.token';\n\nimport { mergeMap } from 'rxjs/operators';\nimport { parse } from 'url';\nimport {from, Observable} from 'rxjs';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n  tokenGetter: () => string | null | Promise<string | null>;\n  headerName: string;\n  authScheme: string;\n  whitelistedDomains: Array<string | RegExp>;\n  blacklistedRoutes: Array<string | RegExp>;\n  throwNoTokenError: boolean;\n  skipWhenExpired: boolean;\n\n  constructor(\n    @Inject(JWT_OPTIONS) config: any,\n    public jwtHelper: JwtHelperService\n  ) {\n    this.tokenGetter = config.tokenGetter;\n    this.headerName = config.headerName || 'Authorization';\n    this.authScheme =\n      config.authScheme || config.authScheme === ''\n        ? config.authScheme\n        : 'Bearer ';\n    this.whitelistedDomains = config.whitelistedDomains || [];\n    this.blacklistedRoutes = config.blacklistedRoutes || [];\n    this.throwNoTokenError = config.throwNoTokenError || false;\n    this.skipWhenExpired = config.skipWhenExpired;\n  }\n\n  isWhitelistedDomain(request: HttpRequest<any>): boolean {\n    const requestUrl: any = parse(request.url, false, true);\n\n    return (\n      requestUrl.host === null ||\n      this.whitelistedDomains.findIndex(\n        domain =>\n          typeof domain === 'string'\n            ? domain === requestUrl.host\n            : domain instanceof RegExp\n              ? domain.test(requestUrl.host)\n              : false\n      ) > -1\n    );\n  }\n\n  isBlacklistedRoute(request: HttpRequest<any>): boolean {\n    const url = request.url;\n\n    return (\n      this.blacklistedRoutes.findIndex(\n        route =>\n          typeof route === 'string'\n            ? route === url\n            : route instanceof RegExp\n              ? route.test(url)\n              : false\n      ) > -1\n    );\n  }\n\n  handleInterception(\n    token: string | null,\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ) {\n    let tokenIsExpired = false;\n\n    if (!token && this.throwNoTokenError) {\n      throw new Error('Could not get token from tokenGetter function.');\n    }\n\n    if (this.skipWhenExpired) {\n      tokenIsExpired = token ? this.jwtHelper.isTokenExpired(token) : true;\n    }\n\n    if (token && tokenIsExpired && this.skipWhenExpired) {\n      request = request.clone();\n    } else if (token) {\n      request = request.clone({\n        setHeaders: {\n          [this.headerName]: `${this.authScheme}${token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (\n      !this.isWhitelistedDomain(request) ||\n      this.isBlacklistedRoute(request)\n    ) {\n      return next.handle(request);\n    }\n    const token = this.tokenGetter();\n\n    if (token instanceof Promise) {\n      return from(token).pipe(mergeMap(\n        (asyncToken: string | null) => {\n          return this.handleInterception(asyncToken, request, next);\n        }\n      ));\n    } else {\n      return this.handleInterception(token, request, next);\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, Optional, SkipSelf, Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport {JwtInterceptor} from './jwt.interceptor';\nimport {JWT_OPTIONS} from './jwtoptions.token';\nimport {JwtHelperService} from './jwthelper.service';\n\n\nexport interface JwtModuleOptions {\n  jwtOptionsProvider?: Provider;\n  config?: {\n    tokenGetter?: () => string | null | Promise<string | null>;\n    headerName?: string;\n    authScheme?: string;\n    whitelistedDomains?: Array<string | RegExp>;\n    blacklistedRoutes?: Array<string | RegExp>;\n    throwNoTokenError?: boolean;\n    skipWhenExpired?: boolean;\n  };\n}\n\n@NgModule()\nexport class JwtModule {\n\n  constructor(@Optional() @SkipSelf() parentModule: JwtModule) {\n    if (parentModule) {\n      throw new Error('JwtModule is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n  static forRoot(options: JwtModuleOptions): ModuleWithProviders<JwtModule> {\n    return {\n      ngModule: JwtModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: JwtInterceptor,\n          multi: true\n        },\n        options.jwtOptionsProvider ||\n        {\n          provide: JWT_OPTIONS,\n          useValue: options.config\n        },\n        JwtHelperService\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of angular-jwt\n */\n\nexport * from './lib/jwt.interceptor';\nexport * from './lib/jwthelper.service';\nexport * from './lib/jwtoptions.token';\nexport * from './lib/angular-jwt.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}