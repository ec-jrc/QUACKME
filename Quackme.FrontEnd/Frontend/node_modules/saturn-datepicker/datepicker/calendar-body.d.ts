/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, EventEmitter, NgZone, OnChanges, SimpleChanges } from '@angular/core';
/**
 * Extra CSS classes that can be associated with a calendar cell.
 */
import * as ɵngcc0 from '@angular/core';
export declare type SatCalendarCellCssClasses = string | string[] | Set<string> | {
    [key: string]: any;
};
/**
 * An internal class that represents the data corresponding to a single calendar cell.
 * @docs-private
 */
export declare class SatCalendarCell {
    value: number;
    displayValue: string;
    ariaLabel: string;
    enabled: boolean;
    cssClasses?: SatCalendarCellCssClasses;
    constructor(value: number, displayValue: string, ariaLabel: string, enabled: boolean, cssClasses?: SatCalendarCellCssClasses);
}
/**
 * An internal component used to display calendar data in a table.
 * @docs-private
 */
export declare class SatCalendarBody implements OnChanges {
    private _elementRef;
    private _ngZone;
    /** The label for the table. (e.g. "Jan 2017"). */
    label: string;
    /** Enables datepicker MouseOver effect on range mode */
    rangeHoverEffect: boolean;
    /** The cells to display in the table. */
    rows: SatCalendarCell[][];
    /** The value in the table that corresponds to today. */
    todayValue: number;
    /** The value in the table that is currently selected. */
    selectedValue: number;
    /** The value in the table since range of dates started.
     * Null means no interval or interval doesn't start in this month
     */
    begin: number | null;
    /** The value in the table representing end of dates range.
     * Null means no interval or interval doesn't end in this month
     */
    end: number | null;
    /** Whenever user already selected start of dates interval. */
    beginSelected: boolean;
    /** Whenever the current month is before the date already selected */
    isBeforeSelected: boolean;
    /** Whether to mark all dates as semi-selected. */
    rangeFull: boolean;
    /** Whether to use date range selection behaviour.*/
    rangeMode: boolean;
    /** The minimum number of free cells needed to fit the label in the first row. */
    labelMinRequiredCells: number;
    /** The number of columns in the table. */
    numCols: number;
    /** The cell number of the active cell in the table. */
    activeCell: number;
    /**
     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be
     * maintained even as the table resizes.
     */
    cellAspectRatio: number;
    /** Emits when a new value is selected. */
    readonly selectedValueChange: EventEmitter<number>;
    /** The number of blank cells to put at the beginning for the first row. */
    _firstRowOffset: number;
    /** Padding for the individual date cells. */
    _cellPadding: string;
    /** Width of an individual cell. */
    _cellWidth: string;
    /** The cell number of the hovered cell */
    _cellOver: number;
    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone);
    _cellClicked(cell: SatCalendarCell): void;
    _mouseOverCell(cell: SatCalendarCell): void;
    ngOnChanges(changes: SimpleChanges): void;
    _isActiveCell(rowIndex: number, colIndex: number): boolean;
    /** Whenever to mark cell as semi-selected (inside dates interval). */
    _isSemiSelected(date: number): boolean;
    /** Whenever to mark cell as semi-selected before the second date is selected (between the begin cell and the hovered cell). */
    _isBetweenOverAndBegin(date: number): boolean;
    /** Whenever to mark cell as begin of the range. */
    _isBegin(date: number): boolean;
    /** Whenever to mark cell as end of the range. */
    _isEnd(date: number): boolean;
    /** Focuses the active cell after the microtask queue is empty. */
    _focusActiveCell(): void;
    /** Whenever to highlight the target cell when selecting the second date in range mode */
    _previewCellOver(date: number): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SatCalendarBody, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SatCalendarBody, "[sat-calendar-body]", ["matCalendarBody"], { "rangeHoverEffect": "rangeHoverEffect"; "rangeMode": "rangeMode"; "numCols": "numCols"; "activeCell": "activeCell"; "cellAspectRatio": "cellAspectRatio"; "label": "label"; "rows": "rows"; "todayValue": "todayValue"; "selectedValue": "selectedValue"; "begin": "begin"; "end": "end"; "beginSelected": "beginSelected"; "isBeforeSelected": "isBeforeSelected"; "rangeFull": "rangeFull"; "labelMinRequiredCells": "labelMinRequiredCells"; }, { "selectedValueChange": "selectedValueChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItYm9keS5kLnRzIiwic291cmNlcyI6WyJjYWxlbmRhci1ib2R5LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBFeHRyYSBDU1MgY2xhc3NlcyB0aGF0IGNhbiBiZSBhc3NvY2lhdGVkIHdpdGggYSBjYWxlbmRhciBjZWxsLlxuICovXG5leHBvcnQgZGVjbGFyZSB0eXBlIFNhdENhbGVuZGFyQ2VsbENzc0NsYXNzZXMgPSBzdHJpbmcgfCBzdHJpbmdbXSB8IFNldDxzdHJpbmc+IHwge1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbn07XG4vKipcbiAqIEFuIGludGVybmFsIGNsYXNzIHRoYXQgcmVwcmVzZW50cyB0aGUgZGF0YSBjb3JyZXNwb25kaW5nIHRvIGEgc2luZ2xlIGNhbGVuZGFyIGNlbGwuXG4gKiBAZG9jcy1wcml2YXRlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNhdENhbGVuZGFyQ2VsbCB7XG4gICAgdmFsdWU6IG51bWJlcjtcbiAgICBkaXNwbGF5VmFsdWU6IHN0cmluZztcbiAgICBhcmlhTGFiZWw6IHN0cmluZztcbiAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIGNzc0NsYXNzZXM/OiBTYXRDYWxlbmRhckNlbGxDc3NDbGFzc2VzO1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBudW1iZXIsIGRpc3BsYXlWYWx1ZTogc3RyaW5nLCBhcmlhTGFiZWw6IHN0cmluZywgZW5hYmxlZDogYm9vbGVhbiwgY3NzQ2xhc3Nlcz86IFNhdENhbGVuZGFyQ2VsbENzc0NsYXNzZXMpO1xufVxuLyoqXG4gKiBBbiBpbnRlcm5hbCBjb21wb25lbnQgdXNlZCB0byBkaXNwbGF5IGNhbGVuZGFyIGRhdGEgaW4gYSB0YWJsZS5cbiAqIEBkb2NzLXByaXZhdGVcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2F0Q2FsZW5kYXJCb2R5IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmO1xuICAgIHByaXZhdGUgX25nWm9uZTtcbiAgICAvKiogVGhlIGxhYmVsIGZvciB0aGUgdGFibGUuIChlLmcuIFwiSmFuIDIwMTdcIikuICovXG4gICAgbGFiZWw6IHN0cmluZztcbiAgICAvKiogRW5hYmxlcyBkYXRlcGlja2VyIE1vdXNlT3ZlciBlZmZlY3Qgb24gcmFuZ2UgbW9kZSAqL1xuICAgIHJhbmdlSG92ZXJFZmZlY3Q6IGJvb2xlYW47XG4gICAgLyoqIFRoZSBjZWxscyB0byBkaXNwbGF5IGluIHRoZSB0YWJsZS4gKi9cbiAgICByb3dzOiBTYXRDYWxlbmRhckNlbGxbXVtdO1xuICAgIC8qKiBUaGUgdmFsdWUgaW4gdGhlIHRhYmxlIHRoYXQgY29ycmVzcG9uZHMgdG8gdG9kYXkuICovXG4gICAgdG9kYXlWYWx1ZTogbnVtYmVyO1xuICAgIC8qKiBUaGUgdmFsdWUgaW4gdGhlIHRhYmxlIHRoYXQgaXMgY3VycmVudGx5IHNlbGVjdGVkLiAqL1xuICAgIHNlbGVjdGVkVmFsdWU6IG51bWJlcjtcbiAgICAvKiogVGhlIHZhbHVlIGluIHRoZSB0YWJsZSBzaW5jZSByYW5nZSBvZiBkYXRlcyBzdGFydGVkLlxuICAgICAqIE51bGwgbWVhbnMgbm8gaW50ZXJ2YWwgb3IgaW50ZXJ2YWwgZG9lc24ndCBzdGFydCBpbiB0aGlzIG1vbnRoXG4gICAgICovXG4gICAgYmVnaW46IG51bWJlciB8IG51bGw7XG4gICAgLyoqIFRoZSB2YWx1ZSBpbiB0aGUgdGFibGUgcmVwcmVzZW50aW5nIGVuZCBvZiBkYXRlcyByYW5nZS5cbiAgICAgKiBOdWxsIG1lYW5zIG5vIGludGVydmFsIG9yIGludGVydmFsIGRvZXNuJ3QgZW5kIGluIHRoaXMgbW9udGhcbiAgICAgKi9cbiAgICBlbmQ6IG51bWJlciB8IG51bGw7XG4gICAgLyoqIFdoZW5ldmVyIHVzZXIgYWxyZWFkeSBzZWxlY3RlZCBzdGFydCBvZiBkYXRlcyBpbnRlcnZhbC4gKi9cbiAgICBiZWdpblNlbGVjdGVkOiBib29sZWFuO1xuICAgIC8qKiBXaGVuZXZlciB0aGUgY3VycmVudCBtb250aCBpcyBiZWZvcmUgdGhlIGRhdGUgYWxyZWFkeSBzZWxlY3RlZCAqL1xuICAgIGlzQmVmb3JlU2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgLyoqIFdoZXRoZXIgdG8gbWFyayBhbGwgZGF0ZXMgYXMgc2VtaS1zZWxlY3RlZC4gKi9cbiAgICByYW5nZUZ1bGw6IGJvb2xlYW47XG4gICAgLyoqIFdoZXRoZXIgdG8gdXNlIGRhdGUgcmFuZ2Ugc2VsZWN0aW9uIGJlaGF2aW91ci4qL1xuICAgIHJhbmdlTW9kZTogYm9vbGVhbjtcbiAgICAvKiogVGhlIG1pbmltdW0gbnVtYmVyIG9mIGZyZWUgY2VsbHMgbmVlZGVkIHRvIGZpdCB0aGUgbGFiZWwgaW4gdGhlIGZpcnN0IHJvdy4gKi9cbiAgICBsYWJlbE1pblJlcXVpcmVkQ2VsbHM6IG51bWJlcjtcbiAgICAvKiogVGhlIG51bWJlciBvZiBjb2x1bW5zIGluIHRoZSB0YWJsZS4gKi9cbiAgICBudW1Db2xzOiBudW1iZXI7XG4gICAgLyoqIFRoZSBjZWxsIG51bWJlciBvZiB0aGUgYWN0aXZlIGNlbGwgaW4gdGhlIHRhYmxlLiAqL1xuICAgIGFjdGl2ZUNlbGw6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgYXNwZWN0IHJhdGlvICh3aWR0aCAvIGhlaWdodCkgdG8gdXNlIGZvciB0aGUgY2VsbHMgaW4gdGhlIHRhYmxlLiBUaGlzIGFzcGVjdCByYXRpbyB3aWxsIGJlXG4gICAgICogbWFpbnRhaW5lZCBldmVuIGFzIHRoZSB0YWJsZSByZXNpemVzLlxuICAgICAqL1xuICAgIGNlbGxBc3BlY3RSYXRpbzogbnVtYmVyO1xuICAgIC8qKiBFbWl0cyB3aGVuIGEgbmV3IHZhbHVlIGlzIHNlbGVjdGVkLiAqL1xuICAgIHJlYWRvbmx5IHNlbGVjdGVkVmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIC8qKiBUaGUgbnVtYmVyIG9mIGJsYW5rIGNlbGxzIHRvIHB1dCBhdCB0aGUgYmVnaW5uaW5nIGZvciB0aGUgZmlyc3Qgcm93LiAqL1xuICAgIF9maXJzdFJvd09mZnNldDogbnVtYmVyO1xuICAgIC8qKiBQYWRkaW5nIGZvciB0aGUgaW5kaXZpZHVhbCBkYXRlIGNlbGxzLiAqL1xuICAgIF9jZWxsUGFkZGluZzogc3RyaW5nO1xuICAgIC8qKiBXaWR0aCBvZiBhbiBpbmRpdmlkdWFsIGNlbGwuICovXG4gICAgX2NlbGxXaWR0aDogc3RyaW5nO1xuICAgIC8qKiBUaGUgY2VsbCBudW1iZXIgb2YgdGhlIGhvdmVyZWQgY2VsbCAqL1xuICAgIF9jZWxsT3ZlcjogbnVtYmVyO1xuICAgIGNvbnN0cnVjdG9yKF9lbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiwgX25nWm9uZTogTmdab25lKTtcbiAgICBfY2VsbENsaWNrZWQoY2VsbDogU2F0Q2FsZW5kYXJDZWxsKTogdm9pZDtcbiAgICBfbW91c2VPdmVyQ2VsbChjZWxsOiBTYXRDYWxlbmRhckNlbGwpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIF9pc0FjdGl2ZUNlbGwocm93SW5kZXg6IG51bWJlciwgY29sSW5kZXg6IG51bWJlcik6IGJvb2xlYW47XG4gICAgLyoqIFdoZW5ldmVyIHRvIG1hcmsgY2VsbCBhcyBzZW1pLXNlbGVjdGVkIChpbnNpZGUgZGF0ZXMgaW50ZXJ2YWwpLiAqL1xuICAgIF9pc1NlbWlTZWxlY3RlZChkYXRlOiBudW1iZXIpOiBib29sZWFuO1xuICAgIC8qKiBXaGVuZXZlciB0byBtYXJrIGNlbGwgYXMgc2VtaS1zZWxlY3RlZCBiZWZvcmUgdGhlIHNlY29uZCBkYXRlIGlzIHNlbGVjdGVkIChiZXR3ZWVuIHRoZSBiZWdpbiBjZWxsIGFuZCB0aGUgaG92ZXJlZCBjZWxsKS4gKi9cbiAgICBfaXNCZXR3ZWVuT3ZlckFuZEJlZ2luKGRhdGU6IG51bWJlcik6IGJvb2xlYW47XG4gICAgLyoqIFdoZW5ldmVyIHRvIG1hcmsgY2VsbCBhcyBiZWdpbiBvZiB0aGUgcmFuZ2UuICovXG4gICAgX2lzQmVnaW4oZGF0ZTogbnVtYmVyKTogYm9vbGVhbjtcbiAgICAvKiogV2hlbmV2ZXIgdG8gbWFyayBjZWxsIGFzIGVuZCBvZiB0aGUgcmFuZ2UuICovXG4gICAgX2lzRW5kKGRhdGU6IG51bWJlcik6IGJvb2xlYW47XG4gICAgLyoqIEZvY3VzZXMgdGhlIGFjdGl2ZSBjZWxsIGFmdGVyIHRoZSBtaWNyb3Rhc2sgcXVldWUgaXMgZW1wdHkuICovXG4gICAgX2ZvY3VzQWN0aXZlQ2VsbCgpOiB2b2lkO1xuICAgIC8qKiBXaGVuZXZlciB0byBoaWdobGlnaHQgdGhlIHRhcmdldCBjZWxsIHdoZW4gc2VsZWN0aW5nIHRoZSBzZWNvbmQgZGF0ZSBpbiByYW5nZSBtb2RlICovXG4gICAgX3ByZXZpZXdDZWxsT3ZlcihkYXRlOiBudW1iZXIpOiBib29sZWFuO1xufVxuIl19