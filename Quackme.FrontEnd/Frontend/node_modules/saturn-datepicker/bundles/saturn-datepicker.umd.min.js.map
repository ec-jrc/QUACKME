{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://saturn-datepicker/datetime/date-adapter.ts","ng://saturn-datepicker/datetime/native-date-adapter.ts","ng://saturn-datepicker/datetime/date-formats.ts","ng://saturn-datepicker/datetime/native-date-formats.ts","ng://saturn-datepicker/datetime/index.ts","ng://saturn-datepicker/datepicker/datepicker-errors.ts","ng://saturn-datepicker/datepicker/datepicker-intl.ts","ng://saturn-datepicker/datepicker/calendar-body.ts","ng://saturn-datepicker/datepicker/month-view.ts","ng://saturn-datepicker/datepicker/multi-year-view.ts","ng://saturn-datepicker/datepicker/year-view.ts","ng://saturn-datepicker/datepicker/calendar.ts","ng://saturn-datepicker/datepicker/datepicker-animations.ts","ng://saturn-datepicker/datepicker/datepicker.ts","ng://saturn-datepicker/datepicker/datepicker-input.ts","ng://saturn-datepicker/datepicker/datepicker-toggle.ts","ng://saturn-datepicker/datepicker/datepicker-module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","MAT_DATE_LOCALE","InjectionToken","providedIn","factory","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","SUPPORTS_INTL_API","MAT_DATE_LOCALE_PROVIDER","provide","useExisting","DateAdapter","_localeChanges","Subject","deserialize","value","isDateInstance","isValid","invalid","setLocale","locale","next","compareDate","first","second","getYear","getMonth","getDate","sameDate","firstValid","secondValid","clampDate","date","min","max","MAT_DATE_FORMATS","Intl","_a","DEFAULT_MONTH_NAMES","long","short","narrow","DEFAULT_DATE_NAMES","range","String","DEFAULT_DAY_OF_WEEK_NAMES","FIRST_DAY_OF_WEEK","af","ar","ar-ly","ar-ma","ar-tn","az","be","bg","bm","br","bs","ca","cs","cv","cy","da","de","de-at","de-ch","el","en-au","en-gb","en-ie","en-nz","eo","es","es-do","et","eu","fa","fi","fo","fr","fr-ch","fy","gd","gl","gom-latn","hr","hu","hy-am","id","is","it","jv","ka","kk","km","ky","lb","lt","lv","me","mi","mk","ms","ms-my","mt","my","nb","nl","nl-be","nn","pl","pt","pt-BR","ro","ru","sd","se","sk","sl","sq","sr","sr-cyrl","ss","sv","sw","tet","tg","tl-ph","tlh","tr","tzl","tzm","tzm-latn","ug-cn","uk","ur","uz","uz-latn","vi","x-pseudo","yo","zh-cn","ISO_8601_REGEX","valueFunction","valuesArray","NativeDateAdapter","_super","matDateLocale","platform","_this","useUtcForDisplay","TRIDENT","_clampDate","EDGE","tslib_1.__extends","getFullYear","getDayOfWeek","getDay","getMonthNames","style","dtf_1","DateTimeFormat","month","timeZone","_stripDirectionalityCharacters","_format","Date","getDateNames","dtf_2","day","getDayOfWeekNames","dtf_3","weekday","getYearName","dtf","year","getFirstDayOfWeek","toLowerCase","substr","getNumDaysInMonth","_createDateWithOverflow","clone","getTime","createDate","Error","result","today","parse","format","displayFormat","setFullYear","Math","toDateString","addCalendarYears","years","addCalendarMonths","months","newDate","addCalendarDays","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","obj","isNaN","NaN","slice","str","replace","UTC","getHours","getMinutes","getSeconds","getMilliseconds","Optional","type","Inject","args","Platform","Injectable","tslib_1.__param","MAT_NATIVE_DATE_FORMATS","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","NativeDateModule","NgModule","imports","PlatformModule","providers","useClass","SatNativeDateModule","useValue","Éµ0$1","createMissingDateImplError","provider","SatDatepickerIntl","changes","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","SatCalendarCell","displayValue","ariaLabel","enabled","cssClasses","SatCalendarBody","_elementRef","_ngZone","rangeHoverEffect","rangeMode","numCols","activeCell","cellAspectRatio","selectedValueChange","EventEmitter","_cellClicked","cell","emit","_mouseOverCell","_cellOver","ngOnChanges","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","rowIndex","colIndex","cellNumber","_isSemiSelected","rangeFull","begin","end","_isBetweenOverAndBegin","beginSelected","isBeforeSelected","_isBegin","_isEnd","_focusActiveCell","runOutsideAngular","onStable","asObservable","pipe","take","subscribe","nativeElement","querySelector","focus","_previewCellOver","ElementRef","NgZone","tslib_1.__decorate","Input","Output","Component","moduleId","module","selector","template","host","class","role","aria-readonly","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","SatMonthView","_changeDetectorRef","_dateFormats","_dateAdapter","_dir","closeAfterSelection","_rangeFull","selectedChange","_userSelection","activeDateChange","_activeDate","_beginDate","_getValidDateOrNull","updateRangeSpecificValues","_endDate","_beginDateSelected","oldActiveDate","validDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selected","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","ngAfterContentInit","_dateSelected","selectedYear","activeDate","selectedMonth","selectedDate","_createWeekCells","_handleCalendarBodyKeydown","event","isRtl","_isRtl","keyCode","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","HOME","END","PAGE_UP","altKey","PAGE_DOWN","ENTER","SPACE","dateFilter","preventDefault","selected","_todayDate","_monthLabel","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","_initWeekdays","markForCheck","_matCalendarBody","firstDayOfWeek","narrowWeekdays","weekdays","map","_weekdays","concat","daysInMonth","dateNames","_weeks","push","_shouldEnableDate","cellClasses","dateClass","undefined","d1","d2","_beginDateNumber","_endDateNumber","beginDate","endDate","ChangeDetectorRef","Directionality","ViewChild","static","SatMultiYearView","yearSelected","isSameMultiYearView","_selectedYear","_todayYear","minYearOfPage","getActiveOffset","_years","row","_createCellForYear","_yearSelected","yearsPerPage","_getActiveCell","yearName","_shouldEnableYear","dateAdapter","date1","date2","year1","year2","startingYear","getStartingYear","floor","activeYear","SatYearView","monthSelected","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","SatCalendarHeader","_intl","calendar","changeDetectorRef","stateChanges","currentView","multi-year","currentPeriodClicked","orderPeriod","orderPeriodLabel","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","SatCalendar","forwardRef","SatCalendarFooter","dateRangesChange","beginDateSelected","beginDateSelectedChange","_moveFocusOnNextTick","startView","_intlChanges","_startAt","_clampedActiveDate","_currentView","_calendarHeaderPortal","ComponentPortal","headerComponent","_calendarFooterPortal","footerComponent","startAt","ngAfterViewChecked","focusActiveCell","ngOnDestroy","unsubscribe","complete","change","firstChange","view","_getCurrentViewComponent","detectChanges","updateTodaysDate","monthView","yearView","multiYearView","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","matDatepickerAnimations","transformPanel","trigger","state","opacity","transform","transition","animate","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","SatDatepickerContentBase","SatDatepickerContent","elementRef","ngAfterViewInit","_calendar","close","datepicker","[@transformPanel]","[class.mat-datepicker-content-touch]","animations","inputs","mixinColor","SatDatepicker","_dialog","_overlay","_viewContainerRef","scrollStrategy","_document","_touchUi","openedStream","closedStream","selectFirstDateOnClose","_opened","_validSelected","_focusedElementBeforeOpen","_inputSubscription","Subscription","EMPTY","_disabledChange","_selectedChanged","_scrollStrategy","_rangeMode","mode","_datepickerInput","_color","_getThemePalette","coerceBooleanProperty","_disabled","disabled","newValue","open","_dateFilter","_popupRef","dispose","_popupComponentRef","select","oldValue","_selectRange","dates","_selectYear","_selectMonth","_registerInput","input","_valueChange","activeElement","touchUi","_openAsDialog","_openAsPopup","hasAttached","detach","_dialogRef","_calendarPortal","isAttached","completeClose","setTimeout","setBeginDateSelected","direction","viewContainerRef","panelClass","afterClosed","componentInstance","_setColor","_createPopup","attach","instance","updatePosition","overlayConfig","OverlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","overlayElement","setAttribute","merge","backdropClick","detachments","keydownEvents","filter","ESCAPE","position","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","color","MatDialog","ViewContainerRef","DOCUMENT","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","SatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","SatDatepickerInputEvent","targetElement","_formField","dateChange","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","control","_datepicker","matDatepickerMin","actual","controlValue","_maxValidator","matDatepickerMax","_filterValidator","matDatepickerFilter","_rangeValidator","matDatepickerRange","_validator","Validators","compose","localeChanges","_value","rangeValue","oldDate","_min","_max","element","blur","registerOnValidatorChange","fn","validate","getPopupConnectionElementRef","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","isAltDownArrow","readOnly","_onInput","parts","split","beginDateString","endDateString","_onChange","_onBlur","_formatValue","MatFormField","SatDatepickerInput_1","Directive","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","SatDatepickerToggleIcon","SatDatepickerToggle","defaultTabIndex","_stateChanges","parsedTabIndex","Number","tabIndex","_watchStateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","Attribute","ContentChild","[attr.tabindex]","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","(focus)","SatDatepickerModule","CommonModule","MatButtonModule","MatDialogModule","OverlayModule","A11yModule","PortalModule","exports","declarations","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<sat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n/** First day of week according locale.\n * Taken form moment.js source code https://github.com/moment/moment/tree/develop/src/locale\n */\nconst FIRST_DAY_OF_WEEK = {\n  af:1, ar:6, 'ar-ly':6, 'ar-ma':6, 'ar-tn':1, az:1, be:1, bg:1, bm:1, br:1, bs:1, ca:1, cs:1, cv:1,\n  cy:1, da:1, de:1, 'de-at':1, 'de-ch':1, el:1, 'en-au':1, 'en-gb':1, 'en-ie':1, 'en-nz':1, eo:1,\n  es:1, 'es-do':1, et:1, eu:1, fa:6, fi:1, fo:1, fr:1, 'fr-ch':1, fy:1, gd:1, gl:1, 'gom-latn':1,\n  hr:1, hu:1, 'hy-am':1, id:1, is:1, it:1, jv:1, ka:1, kk:1, km:1, ky:1, lb:1, lt:1, lv:1, me:1,\n  mi:1, mk:1, ms:1, 'ms-my':1, mt:1, my:1, nb:1, nl:1, 'nl-be':1, nn:1, pl:1, pt:1, 'pt-BR': 0, ro:1, ru:1,\n  sd:1, se:1, sk:1, sl:1, sq:1, sr:1, 'sr-cyrl':1, ss:1, sv:1, sw:1, 'tet':1, tg:1, 'tl-ph':1,\n  'tlh':1, tr:1, 'tzl':1, 'tzm':6, 'tzm-latn':6, 'ug-cn':1, uk:1, ur:1, uz:1, 'uz-latn':1, vi:1,\n  'x-pseudo':1, yo:1, 'zh-cn':1,\n};\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is.\n    // Sometimes people use excess language definition, e.g. ru-RU,\n    // so we use fallback to two-letter language code\n    const locale = this.locale.toLowerCase();\n    return FIRST_DAY_OF_WEEK[locale] || FIRST_DAY_OF_WEEK[locale.substr(0, 2)] || 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n    imports: [PlatformModule],\n    providers: [\n        {provide: DateAdapter, useClass: NativeDateAdapter},\n    ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n    imports: [NativeDateModule],\n    providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class SatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `SatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n        `modules at your application root: SatNativeDateModule, MatMomentDateModule, or provide a ` +\n        `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class SatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type SatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class SatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: SatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[sat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** Enables datepicker MouseOver effect on range mode */\n  @Input() rangeHoverEffect = true;\n\n  /** The cells to display in the table. */\n  @Input() rows: SatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The value in the table since range of dates started.\n   * Null means no interval or interval doesn't start in this month\n   */\n  @Input() begin: number|null;\n\n  /** The value in the table representing end of dates range.\n   * Null means no interval or interval doesn't end in this month\n   */\n  @Input() end: number|null;\n\n  /** Whenever user already selected start of dates interval. */\n  @Input() beginSelected: boolean;\n\n  /** Whenever the current month is before the date already selected */\n  @Input() isBeforeSelected: boolean;\n\n  /** Whether to mark all dates as semi-selected. */\n  @Input() rangeFull: boolean;\n\n  /** Whether to use date range selection behaviour.*/\n  @Input() rangeMode = false;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  /** The cell number of the hovered cell */\n  _cellOver: number;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: SatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  _mouseOverCell(cell: SatCalendarCell): void {\n    if (this.rangeHoverEffect) this._cellOver = cell.value;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n\n    if (changes.activeCell) {\n      this._cellOver = this.activeCell + 1;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Whenever to mark cell as semi-selected (inside dates interval). */\n  _isSemiSelected(date: number) {\n    if (!this.rangeMode) {\n      return false;\n    }\n    if (this.rangeFull) {\n      return true;\n    }\n    /** Do not mark start and end of interval. */\n    if (date === this.begin || date === this.end) {\n      return false;\n    }\n    if (this.begin && !this.end) {\n      return date > this.begin;\n    }\n    if (this.end && !this.begin) {\n      return date < this.end;\n    }\n    return date > <number>this.begin && date < <number>this.end;\n  }\n\n  /** Whenever to mark cell as semi-selected before the second date is selected (between the begin cell and the hovered cell). */\n  _isBetweenOverAndBegin(date: number): boolean {\n    if (!this._cellOver || !this.rangeMode || !this.beginSelected) {\n      return false;\n    }\n    if (this.isBeforeSelected && !this.begin) {\n      return date > this._cellOver;\n    }\n    if (this._cellOver > this.begin) {\n      return date > this.begin && date < this._cellOver;\n    }\n    if (this._cellOver < this.begin) {\n      return date < this.begin && date > this._cellOver;\n    }\n    return false;\n  }\n\n  /** Whenever to mark cell as begin of the range. */\n  _isBegin(date: number): boolean {\n    if (this.rangeMode && this.beginSelected && this._cellOver) {\n      if (this.isBeforeSelected && !this.begin) {\n        return this._cellOver === date;\n      } else {\n        return (this.begin === date && !(this._cellOver < this.begin)) ||\n          (this._cellOver === date && this._cellOver < this.begin)\n      }\n    }\n    return this.begin === date;\n  }\n\n  /** Whenever to mark cell as end of the range. */\n  _isEnd(date: number): boolean {\n    if (this.rangeMode && this.beginSelected && this._cellOver) {\n      if (this.isBeforeSelected && !this.begin) {\n        return false;\n      } else {\n        return (this.end === date && !(this._cellOver > this.begin)) ||\n          (this._cellOver === date && this._cellOver > this.begin)\n      }\n    }\n    return this.end === date;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n\n  /** Whenever to highlight the target cell when selecting the second date in range mode */\n  _previewCellOver(date: number): boolean {\n    return this._cellOver === date && this.rangeMode && this.beginSelected;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {SatCalendarBody, SatCalendarCell, SatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SatMonthView<D> implements AfterContentInit {\n\n  /** Current start of interval. */\n  @Input()\n  get beginDate(): D | null { return this._beginDate; }\n  set beginDate(value: D | null) {\n    this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this.updateRangeSpecificValues();\n  }\n  private _beginDate: D | null;\n\n  /** Current end of interval. */\n  @Input()\n  get endDate(): D | null { return this._endDate; }\n  set endDate(value: D | null) {\n    this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this.updateRangeSpecificValues();\n  }\n  private _endDate: D | null;\n\n  /** Allow selecting range of dates. */\n  @Input() rangeMode = false;\n\n  /** Enables datepicker MouseOver effect on range mode */\n  @Input() rangeHoverEffect = true;\n\n  /** Enables datepicker closing after selection */\n  @Input() closeAfterSelection = true;\n\n  /** First day of interval. */\n  _beginDateNumber: number | null;\n\n  /* Last day of interval. */\n  _endDateNumber: number | null;\n\n  /** Whenever full month is inside dates interval. */\n  _rangeFull: boolean | null = false;\n\n  /** Whenever user already selected start of dates interval. */\n  @Input() set beginDateSelected(value: D | null) { this._beginDateSelected = value } ;\n\n  /** Whenever user already selected start of dates interval. An inner property that avoid asynchronous problems */\n  _beginDateSelected: D | null;\n\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => SatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(SatCalendarBody, {static: false}) _matCalendarBody: SatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: SatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n\n    if (this.rangeMode) {\n\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n      if (!this._beginDateSelected) { // At first click emit the same start and end of interval\n        this._beginDateSelected = selectedDate;\n        this.selectedChange.emit(selectedDate);\n      } else {\n        this._beginDateSelected = null;\n        this.selectedChange.emit(selectedDate);\n        this._userSelection.emit();\n      }\n      this._createWeekCells();\n      this.activeDate = selectedDate;\n      this._focusActiveCell();\n    } else if (this._selectedDate != date) {\n\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n      this._userSelection.emit();\n      this._createWeekCells();\n    }\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          if (!this._beginDateSelected) {\n            this._userSelection.emit();\n          }\n          if (this._beginDateSelected || !this.closeAfterSelection) {\n            this._focusActiveCell();\n          }\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this.updateRangeSpecificValues();\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._initWeekdays();\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Initializes the weekdays. */\n  private _initWeekdays() {\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n        return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n\n  /** Creates SatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new SatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n  /** Updates range full parameter on each begin or end of interval update.\n   * Necessary to display calendar-body correctly\n   */\n  private updateRangeSpecificValues(): void {\n    if (this.rangeMode) {\n      this._beginDateNumber = this._getDateInCurrentMonth(this._beginDate);\n      this._endDateNumber = this._getDateInCurrentMonth(this._endDate);\n      this._rangeFull = this.beginDate && this.endDate && !this._beginDateNumber &&\n        !this._endDateNumber &&\n        this._dateAdapter.compareDate(this.beginDate, this.activeDate) <= 0 &&\n        this._dateAdapter.compareDate(this.activeDate, this.endDate) <= 0;\n    } else {\n      this._beginDateNumber = this._endDateNumber = null;\n      this._rangeFull = false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {SatCalendarBody, SatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {DateAdapter} from '../datetime/date-adapter';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (!isSameMultiYearView(\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(SatCalendarBody, {static: false}) _matCalendarBody: SatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: SatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          yearsPerPage - getActiveOffset(\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an SatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new SatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n\nexport function isSameMultiYearView<D>(\n  dateAdapter: DateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\n          Math.floor((year2 - startingYear) / yearsPerPage);\n}\n\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nexport function getActiveOffset<D>(\n  dateAdapter: DateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\n    yearsPerPage);\n}\n\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear<D>(\n  dateAdapter: DateAdapter<D>, minDate: D | null, maxDate: D | null): number {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo (a: number, b: number): number {\n  return (a % b + b) % b;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {SatCalendarBody, SatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(SatCalendarBody, {static: false}) _matCalendarBody: SatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: SatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an SatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new SatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {SatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {SatDatepickerIntl} from './datepicker-intl';\nimport {SatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  SatMultiYearView,\n  yearsPerPage\n} from './multi-year-view';\nimport {SatYearView} from './year-view';\n\nimport {SatDatepickerRangeValue} from './datepicker-input';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type SatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for SatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatCalendarHeader<D> {\n  constructor(private _intl: SatDatepickerIntl,\n              @Inject(forwardRef(() => SatCalendar)) public calendar: SatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    return `${minYearOfPage} \\u2013 ${maxYearOfPage}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label.\n   * Option`calendar.orderPeriodLabel` sort the label period views.\n   * - Default [multi-year]: multi-year then back to month\n   * - Month [month]: month > year > multi-year\n   */\n  currentPeriodClicked(): void {\n    const mouthFirstOrder: SatCalendarView[] = ['month', 'year', 'multi-year'];\n    const defaultOrder: SatCalendarView[] = ['month', 'multi-year', 'month'];\n    const orderPeriod = this.calendar.orderPeriodLabel === 'month' ? mouthFirstOrder : defaultOrder;\n    switch (this.calendar.currentView) {\n      case 'month':\n        this.calendar.currentView = orderPeriod[1];\n        break;\n      case 'year':\n          this.calendar.currentView = orderPeriod[2]\n          break;\n      default:\n        this.calendar.currentView = orderPeriod[0]\n        break;\n    }\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n}\n\n/** Default footer for SatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-calendar-footer',\n  templateUrl: 'calendar-footer.html',\n  exportAs: 'matCalendarFooter',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatCalendarFooter<D> {\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** Beginning of date range. */\n    @Input()\n    get beginDate(): D | null { return this._beginDate; }\n    set beginDate(value: D | null) {\n        this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    private _beginDate: D | null;\n\n    /** Date range end. */\n    @Input()\n    get endDate(): D | null { return this._endDate; }\n    set endDate(value: D | null) {\n        this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    private _endDate: D | null;\n\n    /** Whenever datepicker is for selecting range of dates. */\n    @Input() rangeMode = false;\n\n    /** Enables datepicker MouseOver effect on range mode */\n    @Input() rangeHoverEffect = true;\n\n    /** Enables datepicker closing after selection */\n    @Input() closeAfterSelection = true;\n\n    /** Emits when new pair of dates selected. */\n    @Output() dateRangesChange = new EventEmitter<SatDatepickerRangeValue<D>>();\n\n    /** Whenever user already selected start of dates interval. */\n    beginDateSelected: D | boolean = false;\n\n    /** Emits when a new start date has been selected in range mode. */\n    @Output() beginDateSelectedChange = new EventEmitter<D>();\n\n    /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  /** An input indicating the type of the footer component, if set. */\n  @Input() footerComponent: ComponentType<any>;\n\n  /** A portal containing the footer component type for this calendar. */\n  _calendarFooterPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: SatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => SatCalendarCellCssClasses;\n\n  /** Order the views when clicking on period label button */\n  @Input() orderPeriodLabel: 'multi-year' | 'month' = 'multi-year';\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(SatMonthView, {static: false}) monthView: SatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(SatYearView, {static: false}) yearView: SatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(SatMultiYearView, {static: false}) multiYearView: SatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): SatCalendarView { return this._currentView; }\n  set currentView(value: SatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: SatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: SatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || SatCalendarHeader);\n    this._calendarFooterPortal = new ComponentPortal(this.footerComponent || SatCalendarFooter);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (this.rangeMode) {\n        if (!this.beginDateSelected) {\n          this.beginDateSelected = date;\n          this.beginDate = date;\n          this.endDate = date;\n          this.beginDateSelectedChange.emit(date);\n        } else {\n          this.beginDateSelected = false;\n          if (this._dateAdapter.compareDate(<D>this.beginDate, date) <= 0) {\n            this.endDate = date;\n          } else {\n            this.endDate = this.beginDate;\n            this.beginDate = date;\n          }\n          this.dateRangesChange.emit({begin: <D>this.beginDate, end: this.endDate});\n        }\n    } else if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {SatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {SatCalendarCellCssClasses} from './calendar-body';\nimport {SatDatepickerInput, SatDatepickerRangeValue} from './datepicker-input';\nimport {DateAdapter} from '../datetime/date-adapter';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('sat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to SatDatepickerContent.\n/** @docs-private */\nclass SatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _SatDatepickerContentMixinBase: CanColorCtor & typeof SatDatepickerContentBase =\n    mixinColor(SatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * SatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class SatDatepickerContent<D> extends _SatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(SatCalendar, {static: false}) _calendar: SatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: SatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n\n  close() {\n    if (this.datepicker.closeAfterSelection) {\n      this.datepicker.close();\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class SatDatepicker<D> implements OnDestroy, CanColor {\n\n  /** Whenever datepicker is for selecting range of dates. */\n  @Input()\n  get rangeMode(): boolean {\n    return this._rangeMode;\n  }\n  set rangeMode(mode: boolean) {\n    this._rangeMode = mode;\n    if (this.rangeMode) {\n      this._validSelected = null;\n    } else {\n      this._beginDate = this._endDate = null;\n    }\n  }\n  private _rangeMode;\n\n  /** Start of dates interval. */\n  @Input()\n  get beginDate(): D | null { return this._beginDate; }\n  set beginDate(value: D | null) {\n    this._validSelected = null;\n    this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _beginDate: D | null;\n\n  /** End of dates interval. */\n  @Input()\n  get endDate(): D | null { return this._endDate; }\n  set endDate(value: D | null) {\n    this._validSelected = null;\n    this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _endDate: D | null;\n\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** An input indicating the type of the custom footer component for the calendar, if set. */\n  @Input() calendarFooterComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    if (this.rangeMode) {\n      return this._startAt || (this._datepickerInput && this._datepickerInput.value ?\n        (<SatDatepickerRangeValue<D>>this._datepickerInput.value).begin : null);\n    }\n    return this._startAt || (this._datepickerInput ? <D|null>this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => SatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Enables datepicker closing after selection */\n  @Input() closeAfterSelection = true;\n\n  /** Enables datepicker MouseOver effect on range mode */\n  @Input() rangeHoverEffect = true;\n\n  /** In range mod, enable datepicker to select the first date selected as a one-day-range,\n   * if the user closes the picker before selecting another date\n   */\n  @Input() selectFirstDateOnClose = false;\n\n  /** Order the views when clicking on period label button */\n  @Input() orderPeriodLabel: 'month' | 'multi-year' = 'multi-year';\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `sat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<SatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<SatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<SatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: SatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<SatDatepickerRangeValue<D>|D>();\n\n  /** The date already selected by the user in range mode. */\n  private _beginDateSelected: D | null;\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n\n  /** Selects the given date range */\n  _selectRange(dates: SatDatepickerRangeValue<D>): void {\n    this._beginDateSelected = null;\n    if (!this._dateAdapter.sameDate(dates.begin, this.beginDate) ||\n      !this._dateAdapter.sameDate(dates.end, this.endDate)) {\n      this._selectedChanged.next(dates);\n    }\n    this._beginDate = dates.begin;\n    this._endDate = dates.end;\n  }\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: SatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A SatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange\n          .subscribe((value: SatDatepickerRangeValue<D> | D | null) => {\n          if (value === null) {\n            this.beginDate = this.endDate = this._selected = null;\n            return;\n          }\n          if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {\n            value = <SatDatepickerRangeValue<D>>value;\n            if (value.begin && value.end &&\n              this._dateAdapter.compareDate(value.begin, value.end) <= 0) {\n              this.beginDate = value.begin;\n              this.endDate = value.end;\n            } else {\n              this.beginDate = this.endDate = null;\n            }\n          } else {\n            this._selected = <D>value;\n          }\n        });\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an SatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    if (this._beginDateSelected && this.selectFirstDateOnClose ) {\n      this._selectRange({begin: this._beginDateSelected, end: this._beginDateSelected});\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  setBeginDateSelected(date: D): void {\n    this._beginDateSelected = date;\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<SatDatepickerContent<D>>(SatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<SatDatepickerContent<D>>(SatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\nimport {ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {SatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => SatDatepickerInput),\n  multi: true\n};\n\n/**\n * Special interface to input and output dates interval.\n */\nexport interface SatDatepickerRangeValue<D> {\n  begin: D | null;\n  end: D | null;\n}\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use SatDatepickerInputEvent instead.\n */\nexport class SatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: SatDatepickerRangeValue<D> | D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: SatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a SatDatepicker. */\n@Directive({\n  selector: 'input[satDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: SatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class SatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set satDatepicker(value: SatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: SatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: SatDatepickerRangeValue<D> | D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): SatDatepickerRangeValue<D> | D | null {\n    return this._value;\n  }\n  set value(value:  SatDatepickerRangeValue<D> | D | null) {\n    if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {\n      /** Range mode */\n      const rangeValue = <SatDatepickerRangeValue<D>>value;\n      rangeValue.begin = this._dateAdapter.deserialize(rangeValue.begin);\n      rangeValue.end = this._dateAdapter.deserialize(rangeValue.end);\n      this._lastValueValid = !rangeValue.begin || !rangeValue.end ||\n          this._dateAdapter.isValid(rangeValue.begin) && this._dateAdapter.isValid(rangeValue.end);\n      rangeValue.begin = this._getValidDateOrNull(rangeValue.begin);\n      rangeValue.end = this._getValidDateOrNull(rangeValue.end);\n      let oldDate = <SatDatepickerRangeValue<D> | null>this.value;\n      this._elementRef.nativeElement.value =\n          rangeValue && rangeValue.begin && rangeValue.end\n              ? this._dateAdapter.format(rangeValue.begin, this._dateFormats.display.dateInput) +\n                ' - ' +\n                this._dateAdapter.format(rangeValue.end, this._dateFormats.display.dateInput)\n              : '';\n      if (oldDate == null && rangeValue != null || oldDate != null && rangeValue == null ||\n          !this._dateAdapter.sameDate((<SatDatepickerRangeValue<D>>oldDate).begin,\n              rangeValue.begin) ||\n          !this._dateAdapter.sameDate((<SatDatepickerRangeValue<D>>oldDate).end,\n              rangeValue.end)) {\n        if (rangeValue.end && rangeValue.begin &&\n            this._dateAdapter\n                .compareDate(rangeValue.begin, rangeValue.end ) > 0) { // if begin > end\n          value = null;\n        }\n        this._value = value;\n        this._valueChange.emit(value);\n      }\n    } else {\n      /** Not range mode */\n      value = this._dateAdapter.deserialize(value);\n      this._lastValueValid = !value || this._dateAdapter.isValid(value);\n      value = this._getValidDateOrNull(value);\n      let oldDate = this.value;\n      this._value = value;\n      this._elementRef.nativeElement.value =\n          value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n      if (!this._dateAdapter.sameDate(<D>oldDate, value)) {\n        this._valueChange.emit(value);\n      }\n    }\n  }\n  private _value: SatDatepickerRangeValue<D> | D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<SatDatepickerInputEvent<D>> =\n      new EventEmitter<SatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<SatDatepickerInputEvent<D>> =\n      new EventEmitter<SatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<SatDatepickerRangeValue<D>|D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      if (this.min) {\n        if (beginDate && this._dateAdapter.compareDate(this.min, beginDate) > 0) {\n          return {'matDatepickerMin': {'min': this.min, 'actual': beginDate}};\n        }\n        if (endDate && this._dateAdapter.compareDate(this.min, endDate) > 0) {\n          return {'matDatepickerMin': {'min': this.min, 'actual': endDate}};\n        }\n      }\n      return null;\n    }\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      if (this.max) {\n        if (beginDate && this._dateAdapter.compareDate(this.max, beginDate) < 0 ) {\n          return {'matDatepickerMax': {'max': this.max, 'actual': beginDate}};\n        }\n        if (endDate && this._dateAdapter.compareDate(this.max, endDate) < 0) {\n          return {'matDatepickerMax': {'max': this.max, 'actual': endDate}};\n        }\n      }\n      return null;\n    }\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      return !this._dateFilter || !beginDate && !endDate ||\n          this._dateFilter(beginDate) && this._dateFilter(endDate) ?\n        null : {'matDatepickerFilter': true};\n    }\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The form control validator for the date filter. */\n  private _rangeValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      return !beginDate || !endDate || this._dateAdapter.compareDate(beginDate, endDate) <= 0 ?\n        null : {'matDatepickerRange': true};\n    }\n    return null;\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator,\n            this._filterValidator, this._rangeValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: SatDatepickerRangeValue<D> | D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date: SatDatepickerRangeValue<D>|D|null = null;\n    if (this._datepicker.rangeMode) {\n      const parts = value.split('-');\n      if (parts.length > 1) {\n          const position = Math.floor(parts.length / 2);\n          const beginDateString = parts.slice(0, position).join('-');\n          const endDateString = parts.slice(position).join('-');\n          let beginDate = this._dateAdapter.parse(beginDateString,\n              this._dateFormats.parse.dateInput);\n          let endDate = this._dateAdapter.parse(endDateString, this._dateFormats.parse.dateInput);\n          this._lastValueValid = !beginDate || !endDate || this._dateAdapter.isValid(beginDate) &&\n                                                           this._dateAdapter.isValid(endDate);\n          beginDate = this._getValidDateOrNull(beginDate);\n          endDate = this._getValidDateOrNull(endDate);\n          if (beginDate && endDate) {\n            date = <SatDatepickerRangeValue<D>>{begin: beginDate, end: endDate};\n          }\n      }\n    } else {\n      date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n      this._lastValueValid = !date || this._dateAdapter.isValid(date);\n      date = this._getValidDateOrNull(date);\n    }\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: SatDatepickerRangeValue<D> | D | null) {\n      if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {\n          value = value as SatDatepickerRangeValue<D>;\n          this._elementRef.nativeElement.value =\n              value && value.begin && value.end\n                  ? this._dateAdapter.format(value.begin, this._dateFormats.display.dateInput) +\n                  ' - ' +\n                  this._dateAdapter.format(value.end, this._dateFormats.display.dateInput)\n                  : ''\n      }\n      else {\n            value = value as D | null\n          this._elementRef.nativeElement.value =\n              value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n      }\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {SatDatepicker} from './datepicker';\nimport {SatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class SatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'sat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: SatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(SatDatepickerToggleIcon, {static: false}) _customIcon: SatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: SatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {SatCalendar, SatCalendarHeader, SatCalendarFooter} from './calendar';\nimport {SatCalendarBody} from './calendar-body';\nimport {\n  SatDatepicker,\n  SatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {SatDatepickerInput} from './datepicker-input';\nimport {SatDatepickerIntl} from './datepicker-intl';\nimport {SatDatepickerToggle, SatDatepickerToggleIcon} from './datepicker-toggle';\nimport {SatMonthView} from './month-view';\nimport {SatMultiYearView} from './multi-year-view';\nimport {SatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    SatCalendar,\n    SatCalendarBody,\n    SatDatepicker,\n    SatDatepickerContent,\n    SatDatepickerInput,\n    SatDatepickerToggle,\n    SatDatepickerToggleIcon,\n    SatMonthView,\n    SatYearView,\n    SatMultiYearView,\n    SatCalendarHeader,\n    SatCalendarFooter,\n  ],\n  declarations: [\n    SatCalendar,\n    SatCalendarBody,\n    SatDatepicker,\n    SatDatepickerContent,\n    SatDatepickerInput,\n    SatDatepickerToggle,\n    SatDatepickerToggleIcon,\n    SatMonthView,\n    SatYearView,\n    SatMultiYearView,\n    SatCalendarHeader,\n    SatCalendarFooter,\n  ],\n  providers: [\n    SatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    SatDatepickerContent,\n    SatCalendarHeader,\n    SatCalendarFooter,\n  ]\n})\nexport class SatDatepickerModule {}\n"]}