/**
 * @fileoverview added by tsickle
 * Generated from: modules/effects/src/lifecycle_hooks.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
export const onIdentifyEffectsKey = 'ngrxOnIdentifyEffects';
/**
 * @param {?} instance
 * @return {?}
 */
export function isOnIdentifyEffects(instance) {
    return isFunction(instance, onIdentifyEffectsKey);
}
/** @type {?} */
export const onRunEffectsKey = 'ngrxOnRunEffects';
/**
 * @param {?} instance
 * @return {?}
 */
export function isOnRunEffects(instance) {
    return isFunction(instance, onRunEffectsKey);
}
/** @type {?} */
export const onInitEffects = 'ngrxOnInitEffects';
/**
 * @param {?} instance
 * @return {?}
 */
export function isOnInitEffects(instance) {
    return isFunction(instance, onInitEffects);
}
/**
 * @param {?} instance
 * @param {?} functionName
 * @return {?}
 */
function isFunction(instance, functionName) {
    return (instance &&
        functionName in instance &&
        typeof instance[functionName] === 'function');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlmZWN5Y2xlX2hvb2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9lZmZlY3RzL3NyYy9saWZlY3ljbGVfaG9va3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBb0NBLE1BQU0sT0FBTyxvQkFBb0IsR0FDL0IsdUJBQXVCOzs7OztBQUV6QixNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLFFBQWE7SUFFYixPQUFPLFVBQVUsQ0FBQyxRQUFRLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztBQUNwRCxDQUFDOztBQXVDRCxNQUFNLE9BQU8sZUFBZSxHQUF1QixrQkFBa0I7Ozs7O0FBRXJFLE1BQU0sVUFBVSxjQUFjLENBQUMsUUFBYTtJQUMxQyxPQUFPLFVBQVUsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDL0MsQ0FBQzs7QUE4QkQsTUFBTSxPQUFPLGFBQWEsR0FBd0IsbUJBQW1COzs7OztBQUVyRSxNQUFNLFVBQVUsZUFBZSxDQUFDLFFBQWE7SUFDM0MsT0FBTyxVQUFVLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQzdDLENBQUM7Ozs7OztBQUVELFNBQVMsVUFBVSxDQUFDLFFBQWEsRUFBRSxZQUFvQjtJQUNyRCxPQUFPLENBQ0wsUUFBUTtRQUNSLFlBQVksSUFBSSxRQUFRO1FBQ3hCLE9BQU8sUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLFVBQVUsQ0FDN0MsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBFZmZlY3ROb3RpZmljYXRpb24gfSBmcm9tICcuJztcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEludGVyZmFjZSB0byBzZXQgYW4gaWRlbnRpZmllciBmb3IgZWZmZWN0IGluc3RhbmNlcy5cbiAqXG4gKiBCeSBkZWZhdWx0LCBlYWNoIEVmZmVjdHMgY2xhc3MgaXMgcmVnaXN0ZXJlZFxuICogb25jZSByZWdhcmRsZXNzIG9mIGhvdyBtYW55IHRpbWVzIHRoZSBFZmZlY3QgY2xhc3NcbiAqIGlzIGxvYWRlZC4gQnkgaW1wbGVtZW50aW5nIHRoaXMgaW50ZXJmYWNlLCB5b3UgZGVmaW5lXG4gKiBhIHVuaXF1ZSBpZGVudGlmaWVyIHRvIHJlZ2lzdGVyIGFuIEVmZmVjdHMgY2xhc3MgaW5zdGFuY2VcbiAqIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKlxuICogIyMjIFNldCBhbiBpZGVudGlmaWVyIGZvciBhbiBFZmZlY3RzIGNsYXNzXG4gKlxuICogYGBgdHNcbiAqIGNsYXNzIEVmZmVjdFdpdGhJZGVudGlmaWVyIGltcGxlbWVudHMgT25JZGVudGlmeUVmZmVjdHMge1xuICogIGNvbnN0cnVjdG9yKHByaXZhdGUgZWZmZWN0SWRlbnRpZmllcjogc3RyaW5nKSB7fVxuICpcbiAqICBuZ3J4T25JZGVudGlmeUVmZmVjdHMoKSB7XG4gKiAgICByZXR1cm4gdGhpcy5lZmZlY3RJZGVudGlmaWVyO1xuICogIH1cbiAqXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIE9uSWRlbnRpZnlFZmZlY3RzIHtcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTdHJpbmcgaWRlbnRpZmllciB0byBkaWZmZXJlbnRpYXRlIGVmZmVjdCBpbnN0YW5jZXMuXG4gICAqL1xuICBuZ3J4T25JZGVudGlmeUVmZmVjdHMoKTogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3Qgb25JZGVudGlmeUVmZmVjdHNLZXk6IGtleW9mIE9uSWRlbnRpZnlFZmZlY3RzID1cbiAgJ25ncnhPbklkZW50aWZ5RWZmZWN0cyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09uSWRlbnRpZnlFZmZlY3RzKFxuICBpbnN0YW5jZTogYW55XG4pOiBpbnN0YW5jZSBpcyBPbklkZW50aWZ5RWZmZWN0cyB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKGluc3RhbmNlLCBvbklkZW50aWZ5RWZmZWN0c0tleSk7XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJbnRlcmZhY2UgdG8gY29udHJvbCB0aGUgbGlmZWN5Y2xlIG9mIGVmZmVjdHMuXG4gKlxuICogQnkgZGVmYXVsdCwgZWZmZWN0cyBhcmUgbWVyZ2VkIGFuZCBzdWJzY3JpYmVkIHRvIHRoZSBzdG9yZS4gSW1wbGVtZW50IHRoZSBPblJ1bkVmZmVjdHMgaW50ZXJmYWNlIHRvIGNvbnRyb2wgdGhlIGxpZmVjeWNsZSBvZiB0aGUgcmVzb2x2ZWQgZWZmZWN0cy5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqICMjIyBJbXBsZW1lbnQgdGhlIE9uUnVuRWZmZWN0cyBpbnRlcmZhY2Ugb24gYW4gRWZmZWN0cyBjbGFzc1xuICpcbiAqIGBgYHRzXG4gKiBleHBvcnQgY2xhc3MgVXNlckVmZmVjdHMgaW1wbGVtZW50cyBPblJ1bkVmZmVjdHMge1xuICogICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFjdGlvbnMkOiBBY3Rpb25zKSB7fVxuICpcbiAqICAgbmdyeE9uUnVuRWZmZWN0cyhyZXNvbHZlZEVmZmVjdHMkOiBPYnNlcnZhYmxlPEVmZmVjdE5vdGlmaWNhdGlvbj4pIHtcbiAqICAgICByZXR1cm4gdGhpcy5hY3Rpb25zJC5waXBlKFxuICogICAgICAgb2ZUeXBlKCdMT0dHRURfSU4nKSxcbiAqICAgICAgIGV4aGF1c3RNYXAoKCkgPT5cbiAqICAgICAgICAgcmVzb2x2ZWRFZmZlY3RzJC5waXBlKFxuICogICAgICAgICAgIHRha2VVbnRpbCh0aGlzLmFjdGlvbnMkLnBpcGUob2ZUeXBlKCdMT0dHRURfT1VUJykpKVxuICogICAgICAgICApXG4gKiAgICAgICApXG4gKiAgICAgKTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBPblJ1bkVmZmVjdHMge1xuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIE1ldGhvZCB0byBjb250cm9sIHRoZSBsaWZlY3ljbGUgb2YgZWZmZWN0cy5cbiAgICovXG4gIG5ncnhPblJ1bkVmZmVjdHMoXG4gICAgcmVzb2x2ZWRFZmZlY3RzJDogT2JzZXJ2YWJsZTxFZmZlY3ROb3RpZmljYXRpb24+XG4gICk6IE9ic2VydmFibGU8RWZmZWN0Tm90aWZpY2F0aW9uPjtcbn1cblxuZXhwb3J0IGNvbnN0IG9uUnVuRWZmZWN0c0tleToga2V5b2YgT25SdW5FZmZlY3RzID0gJ25ncnhPblJ1bkVmZmVjdHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNPblJ1bkVmZmVjdHMoaW5zdGFuY2U6IGFueSk6IGluc3RhbmNlIGlzIE9uUnVuRWZmZWN0cyB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKGluc3RhbmNlLCBvblJ1bkVmZmVjdHNLZXkpO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogSW50ZXJmYWNlIHRvIGRpc3BhdGNoIGFuIGFjdGlvbiBhZnRlciBlZmZlY3QgcmVnaXN0cmF0aW9uLlxuICpcbiAqIEltcGxlbWVudCB0aGlzIGludGVyZmFjZSB0byBkaXNwYXRjaCBhIGN1c3RvbSBhY3Rpb24gYWZ0ZXJcbiAqIHRoZSBlZmZlY3QgaGFzIGJlZW4gYWRkZWQuIFlvdSBjYW4gbGlzdGVuIHRvIHRoaXMgYWN0aW9uXG4gKiBpbiB0aGUgcmVzdCBvZiB0aGUgYXBwbGljYXRpb24gdG8gZXhlY3V0ZSBzb21ldGhpbmcgYWZ0ZXJcbiAqIHRoZSBlZmZlY3QgaXMgcmVnaXN0ZXJlZC5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqICMjIyBTZXQgYW4gaWRlbnRpZmllciBmb3IgYW4gRWZmZWN0cyBjbGFzc1xuICpcbiAqIGBgYHRzXG4gKiBjbGFzcyBFZmZlY3RXaXRoSW5pdEFjdGlvbiBpbXBsZW1lbnRzIE9uSW5pdEVmZmVjdHMge1xuICogIG5ncnhPbkluaXRFZmZlY3RzKCkge1xuICogICAgcmV0dXJuIHsgdHlwZTogJ1tFZmZlY3RXaXRoSW5pdEFjdGlvbl0gSW5pdCcgfTtcbiAqICB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIE9uSW5pdEVmZmVjdHMge1xuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFjdGlvbiB0byBiZSBkaXNwYXRjaGVkIGFmdGVyIHRoZSBlZmZlY3QgaXMgcmVnaXN0ZXJlZC5cbiAgICovXG4gIG5ncnhPbkluaXRFZmZlY3RzKCk6IEFjdGlvbjtcbn1cblxuZXhwb3J0IGNvbnN0IG9uSW5pdEVmZmVjdHM6IGtleW9mIE9uSW5pdEVmZmVjdHMgPSAnbmdyeE9uSW5pdEVmZmVjdHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNPbkluaXRFZmZlY3RzKGluc3RhbmNlOiBhbnkpOiBpbnN0YW5jZSBpcyBPbkluaXRFZmZlY3RzIHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24oaW5zdGFuY2UsIG9uSW5pdEVmZmVjdHMpO1xufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGluc3RhbmNlOiBhbnksIGZ1bmN0aW9uTmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiAoXG4gICAgaW5zdGFuY2UgJiZcbiAgICBmdW5jdGlvbk5hbWUgaW4gaW5zdGFuY2UgJiZcbiAgICB0eXBlb2YgaW5zdGFuY2VbZnVuY3Rpb25OYW1lXSA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufVxuIl19