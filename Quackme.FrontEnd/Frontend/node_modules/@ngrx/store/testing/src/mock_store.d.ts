import { Observable } from 'rxjs';
import { Action, ActionsSubject, ReducerManager, Store, MemoizedSelectorWithProps, MemoizedSelector } from '@ngrx/store';
import { MockState } from './mock_state';
import { MockSelector } from './mock_selector';
import * as ɵngcc0 from '@angular/core';
declare type OnlyMemoized<T, Result> = T extends string | MemoizedSelector<any, any> ? MemoizedSelector<any, Result> : T extends MemoizedSelectorWithProps<any, any, any> ? MemoizedSelectorWithProps<any, any, Result> : never;
declare type Memoized<Result> = MemoizedSelector<any, Result> | MemoizedSelectorWithProps<any, any, Result>;
export declare class MockStore<T = object> extends Store<T> {
    private state$;
    private initialState;
    private readonly selectors;
    readonly scannedActions$: Observable<Action>;
    private lastState?;
    constructor(state$: MockState<T>, actionsObserver: ActionsSubject, reducerManager: ReducerManager, initialState: T, mockSelectors?: MockSelector[]);
    setState(nextState: T): void;
    overrideSelector<Selector extends Memoized<Result>, Value extends Result, Result = Selector extends MemoizedSelector<any, infer T> ? T : Selector extends MemoizedSelectorWithProps<any, any, infer U> ? U : Value>(selector: Selector | string, value: Value): OnlyMemoized<typeof selector, Result>;
    resetSelectors(): void;
    select(selector: any, prop?: any): Observable<any>;
    addReducer(): void;
    removeReducer(): void;
    /**
     * Refreshes the existing state.
     */
    refreshState(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MockStore<any>, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MockStore<any>>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja19zdG9yZS5kLnRzIiwic291cmNlcyI6WyJtb2NrX3N0b3JlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBY3Rpb24sIEFjdGlvbnNTdWJqZWN0LCBSZWR1Y2VyTWFuYWdlciwgU3RvcmUsIE1lbW9pemVkU2VsZWN0b3JXaXRoUHJvcHMsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBNb2NrU3RhdGUgfSBmcm9tICcuL21vY2tfc3RhdGUnO1xuaW1wb3J0IHsgTW9ja1NlbGVjdG9yIH0gZnJvbSAnLi9tb2NrX3NlbGVjdG9yJztcbmRlY2xhcmUgdHlwZSBPbmx5TWVtb2l6ZWQ8VCwgUmVzdWx0PiA9IFQgZXh0ZW5kcyBzdHJpbmcgfCBNZW1vaXplZFNlbGVjdG9yPGFueSwgYW55PiA/IE1lbW9pemVkU2VsZWN0b3I8YW55LCBSZXN1bHQ+IDogVCBleHRlbmRzIE1lbW9pemVkU2VsZWN0b3JXaXRoUHJvcHM8YW55LCBhbnksIGFueT4gPyBNZW1vaXplZFNlbGVjdG9yV2l0aFByb3BzPGFueSwgYW55LCBSZXN1bHQ+IDogbmV2ZXI7XG5kZWNsYXJlIHR5cGUgTWVtb2l6ZWQ8UmVzdWx0PiA9IE1lbW9pemVkU2VsZWN0b3I8YW55LCBSZXN1bHQ+IHwgTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wczxhbnksIGFueSwgUmVzdWx0PjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1vY2tTdG9yZTxUID0gb2JqZWN0PiBleHRlbmRzIFN0b3JlPFQ+IHtcbiAgICBwcml2YXRlIHN0YXRlJDtcbiAgICBwcml2YXRlIGluaXRpYWxTdGF0ZTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlbGVjdG9ycztcbiAgICByZWFkb25seSBzY2FubmVkQWN0aW9ucyQ6IE9ic2VydmFibGU8QWN0aW9uPjtcbiAgICBwcml2YXRlIGxhc3RTdGF0ZT87XG4gICAgY29uc3RydWN0b3Ioc3RhdGUkOiBNb2NrU3RhdGU8VD4sIGFjdGlvbnNPYnNlcnZlcjogQWN0aW9uc1N1YmplY3QsIHJlZHVjZXJNYW5hZ2VyOiBSZWR1Y2VyTWFuYWdlciwgaW5pdGlhbFN0YXRlOiBULCBtb2NrU2VsZWN0b3JzPzogTW9ja1NlbGVjdG9yW10pO1xuICAgIHNldFN0YXRlKG5leHRTdGF0ZTogVCk6IHZvaWQ7XG4gICAgb3ZlcnJpZGVTZWxlY3RvcjxTZWxlY3RvciBleHRlbmRzIE1lbW9pemVkPFJlc3VsdD4sIFZhbHVlIGV4dGVuZHMgUmVzdWx0LCBSZXN1bHQgPSBTZWxlY3RvciBleHRlbmRzIE1lbW9pemVkU2VsZWN0b3I8YW55LCBpbmZlciBUPiA/IFQgOiBTZWxlY3RvciBleHRlbmRzIE1lbW9pemVkU2VsZWN0b3JXaXRoUHJvcHM8YW55LCBhbnksIGluZmVyIFU+ID8gVSA6IFZhbHVlPihzZWxlY3RvcjogU2VsZWN0b3IgfCBzdHJpbmcsIHZhbHVlOiBWYWx1ZSk6IE9ubHlNZW1vaXplZDx0eXBlb2Ygc2VsZWN0b3IsIFJlc3VsdD47XG4gICAgcmVzZXRTZWxlY3RvcnMoKTogdm9pZDtcbiAgICBzZWxlY3Qoc2VsZWN0b3I6IGFueSwgcHJvcD86IGFueSk6IE9ic2VydmFibGU8YW55PjtcbiAgICBhZGRSZWR1Y2VyKCk6IHZvaWQ7XG4gICAgcmVtb3ZlUmVkdWNlcigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlZnJlc2hlcyB0aGUgZXhpc3Rpbmcgc3RhdGUuXG4gICAgICovXG4gICAgcmVmcmVzaFN0YXRlKCk6IHZvaWQ7XG59XG5leHBvcnQge307XG4iXX0=