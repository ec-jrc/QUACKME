import { ModuleWithProviders, OnDestroy, InjectionToken, Injector } from '@angular/core';
import { Action, ActionReducer, ActionReducerMap, ActionReducerFactory, StoreFeature, InitialState, MetaReducer, RuntimeChecks } from './models';
import { ActionsSubject } from './actions_subject';
import { ReducerManager, ReducerObservable } from './reducer_manager';
import { ScannedActionsSubject } from './scanned_actions_subject';
import { Store } from './store';
import * as ɵngcc0 from '@angular/core';
export declare class StoreRootModule {
    constructor(actions$: ActionsSubject, reducer$: ReducerObservable, scannedActions$: ScannedActionsSubject, store: Store<any>, guard: any);
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<StoreRootModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<StoreRootModule>;
}
export declare class StoreFeatureModule implements OnDestroy {
    private features;
    private featureReducers;
    private reducerManager;
    constructor(features: StoreFeature<any, any>[], featureReducers: ActionReducerMap<any>[], reducerManager: ReducerManager, root: StoreRootModule);
    ngOnDestroy(): void;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<StoreFeatureModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<StoreFeatureModule>;
}
export interface StoreConfig<T, V extends Action = Action> {
    initialState?: InitialState<T>;
    reducerFactory?: ActionReducerFactory<T, V>;
    metaReducers?: MetaReducer<T, V>[];
}
export interface RootStoreConfig<T, V extends Action = Action> extends StoreConfig<T, V> {
    runtimeChecks?: Partial<RuntimeChecks>;
}
export declare class StoreModule {
    static forRoot<T, V extends Action = Action>(reducers: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>, config?: RootStoreConfig<T, V>): ModuleWithProviders<StoreRootModule>;
    static forFeature<T, V extends Action = Action>(featureName: string, reducers: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>, config?: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>>): ModuleWithProviders<StoreFeatureModule>;
    static forFeature<T, V extends Action = Action>(featureName: string, reducer: ActionReducer<T, V> | InjectionToken<ActionReducer<T, V>>, config?: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>>): ModuleWithProviders<StoreFeatureModule>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<StoreModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<StoreModule>;
}
export declare function _createStoreReducers(injector: Injector, reducers: ActionReducerMap<any, any>): unknown;
export declare function _createFeatureStore(injector: Injector, configs: StoreConfig<any, any>[] | InjectionToken<StoreConfig<any, any>>[], featureStores: StoreFeature<any, any>[]): (StoreFeature<any, any> | {
    key: string;
    reducerFactory: any;
    metaReducers: any;
    initialState: any;
})[];
export declare function _createFeatureReducers(injector: Injector, reducerCollection: ActionReducerMap<any, any>[]): unknown[];
export declare function _initialStateFactory(initialState: any): any;
export declare function _concatMetaReducers(metaReducers: MetaReducer[], userProvidedMetaReducers: MetaReducer[]): MetaReducer[];
export declare function _provideForRootGuard(store: Store<any>): any;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmVfbW9kdWxlLmQudHMiLCJzb3VyY2VzIjpbInN0b3JlX21vZHVsZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE9uRGVzdHJveSwgSW5qZWN0aW9uVG9rZW4sIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb24sIEFjdGlvblJlZHVjZXIsIEFjdGlvblJlZHVjZXJNYXAsIEFjdGlvblJlZHVjZXJGYWN0b3J5LCBTdG9yZUZlYXR1cmUsIEluaXRpYWxTdGF0ZSwgTWV0YVJlZHVjZXIsIFJ1bnRpbWVDaGVja3MgfSBmcm9tICcuL21vZGVscyc7XG5pbXBvcnQgeyBBY3Rpb25zU3ViamVjdCB9IGZyb20gJy4vYWN0aW9uc19zdWJqZWN0JztcbmltcG9ydCB7IFJlZHVjZXJNYW5hZ2VyLCBSZWR1Y2VyT2JzZXJ2YWJsZSB9IGZyb20gJy4vcmVkdWNlcl9tYW5hZ2VyJztcbmltcG9ydCB7IFNjYW5uZWRBY3Rpb25zU3ViamVjdCB9IGZyb20gJy4vc2Nhbm5lZF9hY3Rpb25zX3N1YmplY3QnO1xuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICcuL3N0b3JlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFN0b3JlUm9vdE1vZHVsZSB7XG4gICAgY29uc3RydWN0b3IoYWN0aW9ucyQ6IEFjdGlvbnNTdWJqZWN0LCByZWR1Y2VyJDogUmVkdWNlck9ic2VydmFibGUsIHNjYW5uZWRBY3Rpb25zJDogU2Nhbm5lZEFjdGlvbnNTdWJqZWN0LCBzdG9yZTogU3RvcmU8YW55PiwgZ3VhcmQ6IGFueSk7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTdG9yZUZlYXR1cmVNb2R1bGUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZmVhdHVyZXM7XG4gICAgcHJpdmF0ZSBmZWF0dXJlUmVkdWNlcnM7XG4gICAgcHJpdmF0ZSByZWR1Y2VyTWFuYWdlcjtcbiAgICBjb25zdHJ1Y3RvcihmZWF0dXJlczogU3RvcmVGZWF0dXJlPGFueSwgYW55PltdLCBmZWF0dXJlUmVkdWNlcnM6IEFjdGlvblJlZHVjZXJNYXA8YW55PltdLCByZWR1Y2VyTWFuYWdlcjogUmVkdWNlck1hbmFnZXIsIHJvb3Q6IFN0b3JlUm9vdE1vZHVsZSk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgU3RvcmVDb25maWc8VCwgViBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbj4ge1xuICAgIGluaXRpYWxTdGF0ZT86IEluaXRpYWxTdGF0ZTxUPjtcbiAgICByZWR1Y2VyRmFjdG9yeT86IEFjdGlvblJlZHVjZXJGYWN0b3J5PFQsIFY+O1xuICAgIG1ldGFSZWR1Y2Vycz86IE1ldGFSZWR1Y2VyPFQsIFY+W107XG59XG5leHBvcnQgaW50ZXJmYWNlIFJvb3RTdG9yZUNvbmZpZzxULCBWIGV4dGVuZHMgQWN0aW9uID0gQWN0aW9uPiBleHRlbmRzIFN0b3JlQ29uZmlnPFQsIFY+IHtcbiAgICBydW50aW1lQ2hlY2tzPzogUGFydGlhbDxSdW50aW1lQ2hlY2tzPjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFN0b3JlTW9kdWxlIHtcbiAgICBzdGF0aWMgZm9yUm9vdDxULCBWIGV4dGVuZHMgQWN0aW9uID0gQWN0aW9uPihyZWR1Y2VyczogQWN0aW9uUmVkdWNlck1hcDxULCBWPiB8IEluamVjdGlvblRva2VuPEFjdGlvblJlZHVjZXJNYXA8VCwgVj4+LCBjb25maWc/OiBSb290U3RvcmVDb25maWc8VCwgVj4pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFN0b3JlUm9vdE1vZHVsZT47XG4gICAgc3RhdGljIGZvckZlYXR1cmU8VCwgViBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbj4oZmVhdHVyZU5hbWU6IHN0cmluZywgcmVkdWNlcnM6IEFjdGlvblJlZHVjZXJNYXA8VCwgVj4gfCBJbmplY3Rpb25Ub2tlbjxBY3Rpb25SZWR1Y2VyTWFwPFQsIFY+PiwgY29uZmlnPzogU3RvcmVDb25maWc8VCwgVj4gfCBJbmplY3Rpb25Ub2tlbjxTdG9yZUNvbmZpZzxULCBWPj4pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFN0b3JlRmVhdHVyZU1vZHVsZT47XG4gICAgc3RhdGljIGZvckZlYXR1cmU8VCwgViBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbj4oZmVhdHVyZU5hbWU6IHN0cmluZywgcmVkdWNlcjogQWN0aW9uUmVkdWNlcjxULCBWPiB8IEluamVjdGlvblRva2VuPEFjdGlvblJlZHVjZXI8VCwgVj4+LCBjb25maWc/OiBTdG9yZUNvbmZpZzxULCBWPiB8IEluamVjdGlvblRva2VuPFN0b3JlQ29uZmlnPFQsIFY+Pik6IE1vZHVsZVdpdGhQcm92aWRlcnM8U3RvcmVGZWF0dXJlTW9kdWxlPjtcbn1cbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIF9jcmVhdGVTdG9yZVJlZHVjZXJzKGluamVjdG9yOiBJbmplY3RvciwgcmVkdWNlcnM6IEFjdGlvblJlZHVjZXJNYXA8YW55LCBhbnk+KTogdW5rbm93bjtcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIF9jcmVhdGVGZWF0dXJlU3RvcmUoaW5qZWN0b3I6IEluamVjdG9yLCBjb25maWdzOiBTdG9yZUNvbmZpZzxhbnksIGFueT5bXSB8IEluamVjdGlvblRva2VuPFN0b3JlQ29uZmlnPGFueSwgYW55Pj5bXSwgZmVhdHVyZVN0b3JlczogU3RvcmVGZWF0dXJlPGFueSwgYW55PltdKTogKFN0b3JlRmVhdHVyZTxhbnksIGFueT4gfCB7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgcmVkdWNlckZhY3Rvcnk6IGFueTtcbiAgICBtZXRhUmVkdWNlcnM6IGFueTtcbiAgICBpbml0aWFsU3RhdGU6IGFueTtcbn0pW107XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBfY3JlYXRlRmVhdHVyZVJlZHVjZXJzKGluamVjdG9yOiBJbmplY3RvciwgcmVkdWNlckNvbGxlY3Rpb246IEFjdGlvblJlZHVjZXJNYXA8YW55LCBhbnk+W10pOiB1bmtub3duW107XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBfaW5pdGlhbFN0YXRlRmFjdG9yeShpbml0aWFsU3RhdGU6IGFueSk6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIF9jb25jYXRNZXRhUmVkdWNlcnMobWV0YVJlZHVjZXJzOiBNZXRhUmVkdWNlcltdLCB1c2VyUHJvdmlkZWRNZXRhUmVkdWNlcnM6IE1ldGFSZWR1Y2VyW10pOiBNZXRhUmVkdWNlcltdO1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gX3Byb3ZpZGVGb3JSb290R3VhcmQoc3RvcmU6IFN0b3JlPGFueT4pOiBhbnk7XG4iXX0=