{"version":3,"file":"testing.js","sources":["../../../../../../modules/store/testing/src/mock_state.ts","../../../../../../modules/store/testing/src/tokens.ts","../../../../../../modules/store/testing/src/mock_store.ts","../../../../../../modules/store/testing/src/mock_reducer_manager.ts","../../../../../../modules/store/testing/src/testing.ts","../../../../../../modules/store/testing/testing.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MockState<T extends {}> extends BehaviorSubject<T> {\n  constructor() {\n    super(<T>{});\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n","import { Inject, Injectable } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  Action,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  Store,\n  createSelector,\n  MemoizedSelectorWithProps,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nif (typeof afterEach === 'function') {\n  afterEach(() => {\n    try {\n      const mockStore: MockStore | undefined = TestBed.inject(MockStore);\n      if (mockStore) {\n        mockStore.resetSelectors();\n      }\n    } catch {}\n  });\n}\n\ntype OnlyMemoized<T, Result> = T extends string | MemoizedSelector<any, any>\n  ? MemoizedSelector<any, Result>\n  : T extends MemoizedSelectorWithProps<any, any, any>\n    ? MemoizedSelectorWithProps<any, any, Result>\n    : never;\n\ntype Memoized<Result> =\n  | MemoizedSelector<any, Result>\n  | MemoizedSelectorWithProps<any, any, Result>;\n\n@Injectable()\nexport class MockStore<T = object> extends Store<T> {\n  private readonly selectors = new Map<Memoized<any> | string, any>();\n\n  readonly scannedActions$: Observable<Action>;\n  private lastState?: T;\n\n  constructor(\n    private state$: MockState<T>,\n    actionsObserver: ActionsSubject,\n    reducerManager: ReducerManager,\n    @Inject(INITIAL_STATE) private initialState: T,\n    @Inject(MOCK_SELECTORS) mockSelectors: MockSelector[] = []\n  ) {\n    super(state$, actionsObserver, reducerManager);\n    this.resetSelectors();\n    this.setState(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n    for (const mockSelector of mockSelectors) {\n      this.overrideSelector(mockSelector.selector, mockSelector.value);\n    }\n  }\n\n  setState(nextState: T): void {\n    this.state$.next(nextState);\n    this.lastState = nextState;\n  }\n\n  overrideSelector<\n    Selector extends Memoized<Result>,\n    Value extends Result,\n    Result = Selector extends MemoizedSelector<any, infer T>\n      ? T\n      : Selector extends MemoizedSelectorWithProps<any, any, infer U>\n        ? U\n        : Value\n  >(\n    selector: Selector | string,\n    value: Value\n  ): OnlyMemoized<typeof selector, Result> {\n    this.selectors.set(selector, value);\n\n    const resultSelector: Memoized<Result> =\n      typeof selector === 'string'\n        ? createSelector(() => {}, (): Result => value)\n        : selector;\n\n    resultSelector.setResult(value);\n\n    return resultSelector as OnlyMemoized<typeof selector, Result>;\n  }\n\n  resetSelectors() {\n    for (const selector of this.selectors.keys()) {\n      if (typeof selector !== 'string') {\n        selector.release();\n        selector.clearResult();\n      }\n    }\n\n    this.selectors.clear();\n  }\n\n  select(selector: any, prop?: any) {\n    if (typeof selector === 'string' && this.selectors.has(selector)) {\n      return new BehaviorSubject<any>(\n        this.selectors.get(selector)\n      ).asObservable();\n    }\n\n    return super.select(selector, prop);\n  }\n\n  addReducer() {\n    /* noop */\n  }\n\n  removeReducer() {\n    /* noop */\n  }\n\n  /**\n   * Refreshes the existing state.\n   */\n  refreshState() {\n    if (this.lastState) this.setState({ ...this.lastState });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ActionReducer } from '@ngrx/store';\n\n@Injectable()\nexport class MockReducerManager extends BehaviorSubject<\n  ActionReducer<any, any>\n> {\n  constructor() {\n    super(() => undefined);\n  }\n\n  addFeature(feature: any) {\n    /* noop */\n  }\n\n  addFeatures(feature: any) {\n    /* noop */\n  }\n}\n","import { Provider } from '@angular/core';\nimport { MockState } from './mock_state';\nimport {\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  StateObservable,\n  Store,\n} from '@ngrx/store';\nimport { MockStore } from './mock_store';\nimport { MockReducerManager } from './mock_reducer_manager';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nexport interface MockStoreConfig<T> {\n  initialState?: T;\n  selectors?: MockSelector[];\n}\n\nexport function provideMockStore<T = any>(\n  config: MockStoreConfig<T> = {}\n): Provider[] {\n  return [\n    ActionsSubject,\n    MockState,\n    MockStore,\n    { provide: INITIAL_STATE, useValue: config.initialState || {} },\n    { provide: MOCK_SELECTORS, useValue: config.selectors },\n    { provide: StateObservable, useClass: MockState },\n    { provide: ReducerManager, useClass: MockReducerManager },\n    { provide: Store, useExisting: MockStore },\n  ];\n}\n\nexport { MockReducerManager } from './mock_reducer_manager';\nexport { MockState } from './mock_state';\nexport { MockStore } from './mock_store';\nexport { MockSelector } from './mock_selector';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {MOCK_SELECTORS as Éµngrx_modules_store_testing_testing_a} from './src/tokens';"]}